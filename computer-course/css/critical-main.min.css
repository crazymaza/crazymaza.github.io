
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  text-rendering: optimizeSpeed;
  -webkit-overflow-scrolling: touch;
  display: flex;
  flex-direction: column;
  min-width: 320px;
  min-height: 100vh;
  min-height: calc(var(--vh, 1vh) * 100);
  margin: 0;
  overflow-x: hidden;
  background-color: #000;
  color: #fff;
  font-size: 100%;
  font-family: 'Roboto', Helvetica, Verdana, sans-serif;
  scroll-behavior: smooth;
}

input:-webkit-autofill, input:-webkit-autofill:hover, input:-webkit-autofill:focus, input:-webkit-autofill:active {
  -webkit-transition: all 5000s ease-in-out 0s;
  transition: all 5000s ease-in-out 0s;
  -webkit-transition-property: background-color, color;
  transition-property: background-color, color;
}

.nav__top {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  width: 100%;
  height: 50px;
  padding: 0 80px;
}

.nav__top .logo {
  flex-grow: 0.6;
}

.nav__top nav .nav__list {
  display: flex;
  padding: 0;
  gap: 56px;
  list-style: none;
}

.nav__top nav .nav__list .list__item .item__link {
  z-index: 2;
  position: relative;
  color: #fff;
  font-weight: 400;
  font-size: 1rem;
  line-height: 150%;
  text-decoration: none;
}

.nav__top nav .nav__list .list__item .item__link::before {
  display: block;
  z-index: -1;
  position: absolute;
  top: -10px;
  right: 150%;
  bottom: -10px;
  left: -10px;
  border-radius: 50px;
  background: linear-gradient(94.78deg, #DF5950 11.19%, #451046 93.72%);
  content: '';
  animation: unHoverBackground;
  animation-duration: 0.3s;
  animation-timing-function: linear;
  animation-fill-mode: forwards;
}

.nav__top nav .nav__list .list__item .item__link:hover::before {
  animation: hoverBackground;
  animation-duration: 0.3s;
  animation-timing-function: linear;
  animation-fill-mode: both;
}

@keyframes hoverBackground {
  from {
    right: 150%;
  }
  to {
    right: -10px;
  }
}

@keyframes unHoverBackground {
  from {
    right: -10px;
  }
  to {
    right: 150%;
  }
}

.nav__top nav .nav__mobile {
  -webkit-overflow-scrolling: touch;
  display: none;
  z-index: 200;
  position: relative;
  width: 30px;
  height: 30px;
  margin-right: 20px;
  overflow: hidden;
  cursor: pointer;
}

.nav__top nav .nav__mobile.active {
  position: fixed;
  top: 3%;
  right: 5%;
}

.nav__top nav .nav__mobile.active .mobile__btn:nth-of-type(1) {
  display: none;
}

.nav__top nav .nav__mobile.active .mobile__btn:nth-of-type(2) {
  top: 50%;
  transform: translate(-50%, 0%) rotate(45deg);
}

.nav__top nav .nav__mobile.active .mobile__btn:nth-of-type(3) {
  top: 50%;
  transform: translate(-50%, 0%) rotate(-45deg);
}

.nav__top nav .nav__mobile.active .mobile__block {
  transform: translateX(0);
}

.nav__top nav .nav__mobile .mobile__btn {
  z-index: 10;
  position: absolute;
  top: 50%;
  left: 50%;
  width: 30px;
  height: 2px;
  transform: translate(-50%, -50%);
  background-color: #fff;
  transition: all 0.5s;
}

.nav__top nav .nav__mobile .mobile__btn:nth-of-type(2) {
  top: calc(50% - 7px);
}

.nav__top nav .nav__mobile .mobile__btn:nth-of-type(3) {
  top: calc(50% + 7px);
}

.nav__top nav .nav__mobile .mobile__block {
  -webkit-overflow-scrolling: touch;
  -webkit-backface-visibility: hidden;
  display: flex;
  position: fixed;
  top: 0;
  right: 0;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  padding: 15px;
  overflow-y: hidden;
  transform: translateX(100%);
  backface-visibility: hidden;
  background: #000;
  transition: transform 0.5s;
  will-change: transform;
}

.nav__top nav .nav__mobile .mobile__block .nav__list {
  display: flex;
  flex-direction: column;
  width: 100%;
  padding: 0;
  gap: 50px;
  list-style: none;
  text-align: center;
}

.nav__top nav .nav__mobile .mobile__block .nav__list .items__link {
  display: block;
  color: #fff;
  font-size: 1.875rem;
  line-height: 1.5;
  text-decoration: none;
  text-transform: uppercase;
}

.first__block {
  display: flex;
  flex-direction: column;
  height: 100vh;
  height: calc(var(--vh, 1vh) * 100);
  margin-bottom: 200px;
  padding-top: 10px;
  background-image: url("../img/main-screen__bgc.png");
  background-image: url("../img/main-screen__bgc.webp");
  background-position: center center;
  background-size: cover;
  background-repeat: no-repeat;
  background-attachment: fixed;
}

.first__block .container {
  display: grid;
  grid-template-rows: 1fr 130px;
  grid-template-columns: 1fr;
  align-items: center;
  height: calc(100% - 50px);
  padding-right: calc(5px + (70 - 5) * ((100vw - 320px) / (1300 - 320)));
  padding-left: 5px;
}

.first__block .container .title_and_timer {
  display: flex;
  flex-direction: column;
  gap: 50px;
}

.first__block .container .title_and_timer .title {
  max-width: calc(300px + (920 - 300) * ((100vw - 320px) / (1300 - 320)));
  margin: 0;
  font-weight: 800;
  font-size: calc(1.5625rem + (64 - 25) * ((100vw - 20rem) / (1300 - 320)));
  line-height: 140%;
}

.first__block .container .title_and_timer .timer {
  display: flex;
  flex-grow: 1;
  gap: 30px;
}

.first__block .container .title_and_timer .timer__block {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 102px;
  height: 112px;
  gap: 10px;
  background-color: #121212;
}

.first__block .container .title_and_timer .timer__block .block__value {
  margin: 0 !important;
  font-weight: 700;
  font-size: 2.25rem;
  line-height: 140%;
}

.first__block .container .title_and_timer .timer__block .block__type {
  font-weight: 400;
  font-size: 1rem;
  line-height: 140%;
  opacity: 0.4;
}

.first__block .order {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  height: max-content;
  padding: 20px;
  gap: 20px 81px;
  background-color: #121212;
}

.first__block .order .count__text {
  padding-right: 30px;
  font-weight: 400;
  font-size: 1rem;
  line-height: 150%;
  opacity: 0.4;
}

.first__block .order .count__value {
  font-weight: 700;
  font-size: 1rem;
  line-height: 150%;
}

.first__block .order__money {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.first__block .order__money .text {
  padding-right: 30px;
  font-weight: 400;
  font-size: 1rem;
  line-height: 150%;
  opacity: 0.4;
}

.first__block .order__money .count {
  font-weight: 700;
  font-size: 1rem;
  line-height: 150%;
}

.first__block .order__money .progress-bar {
  position: relative;
  width: 750px;
  height: 6px;
  border-radius: 2px;
  background-color: #fff;
}

.first__block .order__money .progress-bar::before {
  position: absolute;
  top: 11px;
  left: 0;
  content: '0';
  opacity: 0.4;
}

.first__block .order__money .progress-bar::after {
  position: absolute;
  top: 11px;
  right: 0;
  content: '1 000 000â‚½';
  opacity: 0.4;
}

.first__block .order__money .progress-bar > span {
  display: block;
  width: 60%;
  height: inherit;
  border-radius: 2px;
  background: linear-gradient(94.78deg, #DF5950 11.19%, #451046 93.72%);
  text-indent: -9999px;
}

@media (min-width: 1300px) {
  .first__block .container {
    padding-right: 70px;
  }
  .first__block .container .title_and_timer .title {
    font-size: 4rem;
  }
  .first__block .container .title_and_timer .title {
    max-width: 920px;
  }
}

@media (min-width: 1600px) {
  .nav__top {
    max-width: 1300px;
    margin: 0 auto;
  }
}

@media (max-width: 1366px) {
  .first__block .order__money .progress-bar {
    width: 500px;
  }
}

@media (max-width: 1129px) {
  .first__block .order {
    padding: 50px;
  }
}

@media (max-width: 1024px) {
  .nav__top {
    padding: 0 40px;
  }
  .nav__top nav .nav__list {
    gap: 20px;
  }
  .first__block {
    align-items: center;
  }
  .first__block .container {
    align-items: end;
  }
}

@media (max-width: 800px) {
  .nav__top {
    justify-content: space-between;
  }
  .nav__top nav .nav__list {
    display: none;
  }
  .nav__top nav .nav__mobile {
    display: block;
  }
}

@media (max-width: 700px) {
  .first__block {
    margin-bottom: 100px;
  }
}

@media (max-width: 608px) {
  .first__block .order__button {
    order: 3;
  }
  .first__block .order__count {
    order: 1;
  }
  .first__block .order__money {
    order: 2;
  }
  .first__block .order__money .progress-bar {
    display: none;
  }
}

@media (max-width: 524px) {
  .first__block .container .title_and_timer .timer__block {
    width: 70px;
    height: 112px;
  }
}

@media (max-width: 450px) {
  .first__block .container .title_and_timer {
    align-items: center;
    text-align: center;
  }
}

@media (max-width: 400px) {
  .first__block .container .title_and_timer .timer {
    gap: 10px;
  }
}

@media (max-width: 389px) {
  .first__block .container .title_and_timer .timer__block {
    width: 60px;
    height: 100px;
  }
  .first__block .container .title_and_timer .timer__block .block__value {
    font-size: 1.875rem;
  }
  .first__block .container .title_and_timer .timer__block .block__type {
    font-size: 0.875rem;
  }
}

@media (max-width: 345px) {
  .first__block .container .title_and_timer .timer__block .block__value {
    font-size: 1.5rem;
  }
  .first__block .container .title_and_timer .timer__block .block__type {
    font-size: 0.75rem;
  }
}

@media (max-width: 320px) {
  .first__block .container {
    padding-right: 5px;
  }
  .first__block .container .title_and_timer .title {
    font-size: 1.5625rem;
  }
  .first__block .container .title_and_timer .title {
    max-width: 300px;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdsb2JhbC9fYmFzZS5zY3NzIiwibWFpbi5jc3MiLCI8bm8gc291cmNlPiIsInNldHRpbmdzL192YXJpYWJsZXMuc2NzcyIsInNldHRpbmdzL19taXhpbnMuc2NzcyIsImxheW91dHMvX2hlYWRlci5zY3NzIiwiYmxvY2tzL19maXJzdC1ibG9jay5zY3NzIiwic2V0dGluZ3MvX2luY2x1ZGUtbWVkaWEuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0E7RUFDRSxzQkFBc0I7QUNDeEI7O0FERUE7OztFQUdFLG1CQUFtQjtBQ0NyQjs7QURFQTtFQVdFLDZCQUE2QjtFRXhCL0IsaUNBQUE7RUZjRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLGdCQUFnQjtFQUNoQixpQkFBaUI7RUVqQm5CLHNDQUFBO0VGa0JFLFNBQVM7RUFPVCxrQkFBa0I7RUFMbEIsc0JHbEJnQjtFSGlCaEIsV0dsQmdCO0VIcUJoQixlQUFlO0VBRGYscURBQXFEO0VBRXJELHVCQUF1QjtBQ0d6Qjs7QUd1SEU7RUFJRSw0Q0FBb0M7RUFBcEMsb0NBQW9DO0VBQ3BDLG9EQUE0QztFQUE1Qyw0Q0FBNEM7QUh2SGhEOztBSTdCQTtFQUNFLGFBQWE7RUFLYixlQUFlO0VBSmYsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxZRktlO0VFSmYsZUFBZTtBSnlYakI7O0FJOVhBO0VBc0JJLGNBQWM7QUorWGxCOztBSXJaQTtFQTJCTSxhQUFhO0VBR2IsVUFBVTtFQUZWLFNBQVM7RUFDVCxnQkFBZ0I7QUorWHRCOztBSTVaQTtFQWlEVSxVQUFVO0VBTlYsa0JBQWtCO0VBSWxCLFdGaERRO0VFNkNSLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBRWpCLHFCQUFxQjtBSmtZL0I7O0FJbGJBO0VBMERZLGNBQWM7RUFPZCxXQUFXO0VBWlgsa0JBQWtCO0VBQ2xCLFVBQVU7RUFFVixXQUFXO0VBRFgsYUFBYTtFQUViLFdBQVc7RUFFWCxtQkFBbUI7RUFDbkIscUVGekR3RDtFRWlEeEQsV0FBVztFQVNYLDRCQUE0QjtFQUM1Qix3QkFBd0I7RUFDeEIsaUNBQWlDO0VBQ2pDLDZCQUE2QjtBSm1ZekM7O0FJbmNBO0VBc0VjLDBCQUEwQjtFQUMxQix3QkFBd0I7RUFDeEIsaUNBQWlDO0VBQ2pDLHlCQUF5QjtBSmlZdkM7O0FJNVhRO0VBQ0U7SUFDRSxXQUFXO0VKK1hyQjtFSTVYUTtJQUNFLFlBQVk7RUo4WHRCO0FBQ0Y7O0FJM1hRO0VBQ0U7SUFDRSxZQUFZO0VKOFh0QjtFSTNYUTtJQUNFLFdBQVc7RUo2WHJCO0FBQ0Y7O0FJNWRBO0VBcUdNLGlDQUFpQztFQUNqQyxhQUFhO0VBQ2IsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsZUFBZTtBSjJYckI7O0FJeGVBO0VBcUhRLGVBQWU7RUFDZixPQUFPO0VBQ1AsU0FBUztBSjZYakI7O0FJcGZBO0VBMkhZLGFBQWE7QUo2WHpCOztBSXhmQTtFQStIWSxRQUFRO0VBQ1IsNENBQTRDO0FKNlh4RDs7QUk3ZkE7RUFvSVksUUFBUTtFQUNSLDZDQUE2QztBSjZYekQ7O0FJbGdCQTtFQTBJVSx3QkFBd0I7QUo0WGxDOztBSXRnQkE7RUErSVEsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsU0FBUztFQUNULFdBQVc7RUFDWCxXQUFXO0VBQ1gsZ0NBQWdDO0VBQ2hDLHNCQUFzQjtFQUN0QixvQkFBb0I7QUoyWDVCOztBSWxoQkE7RUEySlUsb0JBQW9CO0FKMlg5Qjs7QUl0aEJBO0VBK0pVLG9CQUFvQjtBSjJYOUI7O0FJMWhCQTtFQW9LUSxpQ0FBaUM7RUFhakMsbUNBQW1DO0VBWm5DLGFBQWE7RUFDYixlQUFlO0VBQ2YsTUFBTTtFQUNOLFFBQVE7RUFDUixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLHVCQUF1QjtFQUN2QixXQUFXO0VBQ1gsWUFBWTtFQUNaLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsMkJBQTJCO0VBRTNCLDJCQUEyQjtFQUMzQixnQkZuTFU7RUVvTFYsMEJBQTBCO0VBQzFCLHNCQUFzQjtBSjBYOUI7O0FJL2lCQTtFQXdMVSxhQUFhO0VBQ2Isc0JBQXNCO0VBSXRCLFdBQVc7RUFEWCxVQUFVO0VBRlYsU0FBUztFQUNULGdCQUFnQjtFQUdoQixrQkFBa0I7QUoyWDVCOztBSXpqQkE7RUFpTVksY0FBYztFQUNkLFdBQVc7RUFDWCxtQkFBbUI7RUFDbkIsZ0JBQWdCO0VBQ2hCLHFCQUFxQjtFQUNyQix5QkFBeUI7QUo0WHJDOztBS25rQkE7RUFRRSxhQUFhO0VBQ2Isc0JBQXNCO0VBRnRCLGFBQWE7RUpSZixrQ0FBQTtFSVlFLG9CQUFvQjtFQURwQixpQkFBaUI7RUFUakIsb0RBQW9EO0VBQ3BELHFEQUFxRDtFQUdyRCxrQ0FBa0M7RUFEbEMsc0JBQXNCO0VBRHRCLDRCQUE0QjtFQUc1Qiw0QkFBNEI7QUx5bEI5Qjs7QUsvbEJBO0VBc0JJLGFBQWE7RUFFYiw2QkFBNkI7RUFEN0IsMEJBQTBCO0VBRTFCLG1CQUFtQjtFQUNuQix5QkFBeUI7RUZkM0Isc0VBQThJO0VFZTVJLGlCQUFpQjtBTDBsQnJCOztBS3JuQkE7RUFxQ00sYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixTQUFTO0FMc21CZjs7QUs3b0JBO0VGWUUsdUVBQThJO0VFeUN4SSxTQUFTO0VBRlQsZ0JBQWdCO0VGdkN0Qix5RUFBOEk7RUV3Q3hJLGlCQUFpQjtBTHdtQnpCOztBSzVwQkE7RUF5RFEsYUFBYTtFQUViLFlBQVk7RUFEWixTQUFTO0FMZ29CakI7O0FLMXJCQTtFQW9FVSxhQUFhO0VBQ2Isc0JBQXNCO0VBRXRCLG1CQUFtQjtFQURuQix1QkFBdUI7RUFHdkIsWUFBWTtFQUNaLGFBQWE7RUFGYixTQUFTO0VBR1QseUJIeEVZO0FGd3NCdEI7O0FLM3NCQTtFQThGYyxvQkFBb0I7RUFIcEIsZ0JBQWdCO0VBQ2hCLGtCQUFlO0VBQ2YsaUJBQWlCO0FMbW9CL0I7O0FLaHVCQTtFQStHYyxnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixZQUFZO0FMaW9CMUI7O0FLbnZCQTtFQXVJSSxhQUFhO0VBTWIsZUFBZTtFQUZmLG1CQUFtQjtFQURuQix1QkFBdUI7RUFGdkIsbUJBQW1CO0VBTW5CLGFBQWE7RUFGYixjQUFjO0VBSGQseUJIdElrQjtBRnV3QnRCOztBSzF3QkE7RUFzS1EsbUJBQW1CO0VBSm5CLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFlBQVk7QUwrbkJwQjs7QUtweUJBO0VBMEtRLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0FMOG5CekI7O0FLMXlCQTtFQWlMTSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFFBQVE7QUw2bkJkOztBS2h6QkE7RUE4TFEsbUJBQW1CO0VBSm5CLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFlBQVk7QUxpb0JwQjs7QUs5ekJBO0VBa01RLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsaUJBQWlCO0FMZ29CekI7O0FLcDBCQTtFQTRNUSxrQkFBa0I7RUFGbEIsWUFBWTtFQUNaLFdBQVc7RUFIWCxrQkFBa0I7RUFDbEIsc0JIek1VO0FGNDBCbEI7O0FLNTBCQTtFQTROVSxrQkFBa0I7RUFDbEIsU0FBUztFQUNULE9BQU87RUFIUCxZQUFZO0VBSVosWUFBWTtBTGlvQnRCOztBS2gyQkE7RUFvT1Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxRQUFRO0VBSFIscUJBQVM7RUFJVCxZQUFZO0FMaW9CdEI7O0FLeDJCQTtFQWlQUSxjQUFjO0VBSmQsVUFBVTtFQUNWLGVBQWU7RUFFZixrQkFBa0I7RUFEbEIscUVIM080RDtFRzhPNUQsb0JBQW9CO0FMK25CNUI7O0FHLzFCRTtFRWxCRjtJRm1CSSxtQkFBYztFSDZtQmhCO0VLaG9CRjtJRm1CSSxlQUFjO0VIb3BCaEI7RUt2cUJGO0lGbUJJLGdCQUFjO0VIZ3FCaEI7QUFsREY7O0FNaEVJO0VGaGtCSjtJQWlCSSxpQkFBaUI7SUFDakIsY0FBYztFSjhYaEI7QUFDRjs7QU0rS0k7RURqa0JKO0lBZ05ZLFlBQVk7RUxpb0J0QjtBQUNGOztBTWpSSTtFRGprQko7SUFpSk0sYUFBYTtFTDhuQmpCO0FBQ0Y7O0FNL01JO0VGaGtCSjtJQVNJLGVBQWU7RUowWGpCO0VJbllGO0lBaUNRLFNBQVM7RUpnWWY7RUtsYUY7SUFjSSxtQkFBbUI7RUxzbEJyQjtFS3BtQkY7SUFnQ1EsZ0JBQWdCO0VMc21CdEI7QUFqUUY7O0FNNExJO0VGaGtCSjtJQWFJLDhCQUE4QjtFSjRYaEM7RUl6WUY7SUFxQ1EsYUFBYTtFSmtZbkI7RUl2YUY7SUFnSFEsY0FBYztFSjZYcEI7QUFuR0Y7O0FNc0xJO0VEamtCSjtJQWtCSSxvQkFBb0I7RUx3bEJ0QjtBQUNGOztBTTFDSTtFRGprQko7SUFzSlEsUUFBUTtFTCtuQmQ7RUtyeEJGO0lBNEpRLFFBQVE7RUwrbkJkO0VLM3hCRjtJQXNMUSxRQUFRO0VMK25CZDtFS3J6QkY7SUFzTlksYUFBYTtFTGlvQnZCO0FBakVGOztBTXJOSTtFRGprQko7SUE4RVksV0FBVztJQUNYLGFBQWE7RUxrb0J2QjtBQUNGOztBTWpKSTtFRGprQko7SUE0Q1UsbUJBQW1CO0lBRG5CLGtCQUFrQjtFTHdtQjFCO0FBQ0Y7O0FNbkZJO0VEamtCSjtJQStEWSxTQUFTO0VMZ29CbkI7QUFDRjs7QU0vSEk7RURqa0JKO0lBb0ZjLFdBQVc7SUFDWCxhQUFhO0VMbW9CekI7RUt4dEJGO0lBa0drQixtQkFBZTtFTG1vQi9CO0VLcnVCRjtJQXNIa0IsbUJBQWU7RUxrb0IvQjtBQS9CRjs7QU14Skk7RURqa0JKO0lBd0drQixpQkFBZTtFTG1vQi9CO0VLM3VCRjtJQTRIa0Isa0JBQWU7RUxrb0IvQjtBQWxCRjs7QUc5dEJFO0VFZEY7SUZlSSxrQkFBYztFSDJtQmhCO0VLMW5CRjtJRmVJLG9CQUFjO0VIa3BCaEI7RUtqcUJGO0lGZUksZ0JBQWM7RUg4cEJoQjtBQWxERiIsImZpbGUiOiJjcml0aWNhbC1tYWluLm1pbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBjcml0aWNhbDpzdGFydCAqL1xyXG4vLyBCYXNlIHN0eWxlc1xyXG4vLyBCb3gtc2l6aW5nIGRlZmF1bHRzXHJcbmh0bWwge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbiosXHJcbio6YmVmb3JlLFxyXG4qOmFmdGVyIHtcclxuICBib3gtc2l6aW5nOiBpbmhlcml0O1xyXG59XHJcblxyXG5ib2R5IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgbWluLXdpZHRoOiAzMjBweDtcclxuICBtaW4taGVpZ2h0OiAxMDB2aDtcclxuICBtYXJnaW46IDA7XHJcbiAgY29sb3I6ICRjb2xvci13aGl0ZTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItYmxhY2s7XHJcbiAgZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBIZWx2ZXRpY2EsIFZlcmRhbmEsIHNhbnMtc2VyaWY7XHJcbiAgZm9udC1zaXplOiAxMDAlO1xyXG4gIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xyXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZVNwZWVkO1xyXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcclxufVxyXG5cclxuaW5wdXQge1xyXG4gIEBpbmNsdWRlIHdlYi1raXQtYXV0b2ZpbGw7XHJcbn1cclxuXHJcbi8qIGNyaXRpY2FsOmVuZCAqL1xyXG5cclxuLy8gQSBiZXR0ZXIgbG9va2luZyBkZWZhdWx0IGxpbmtzIGRlY29yYXRpb25cclxuYTpub3QoW2NsYXNzXSkge1xyXG4gIHRleHQtZGVjb3JhdGlvbi1za2lwLWluazogYXV0bztcclxufVxyXG5cclxuLy8gUmVtb3ZlIHRleHQtc2hhZG93IGluIHNlbGVjdGlvbiBoaWdobGlnaHQuIEN1c3RvbWl6ZSB0aGUgYmFja2dyb3VuZCBjb2xvciB0byBtYXRjaCB5b3VyIGRlc2lnbi5cclxuOjpzZWxlY3Rpb24ge1xyXG4gIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XHJcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XHJcbn1cclxuXHJcbi8vIEEgYmV0dGVyIGxvb2tpbmcgZGVmYXVsdCBob3Jpem9udGFsIHJ1bGVcclxuaHIge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGhlaWdodDogMXB4O1xyXG4gIGJvcmRlcjogMDtcclxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2NjYztcclxuICBtYXJnaW46IDFlbSAwO1xyXG4gIHBhZGRpbmc6IDA7XHJcbn1cclxuXHJcbi8vIFJlbW92ZSB0aGUgZ2FwIGJldHdlZW4gYXVkaW8sIGNhbnZhcywgaWZyYW1lcywgaW1hZ2VzLCB2aWRlb3MgYW5kIHRoZSBib3R0b20gb2YgdGhlaXIgY29udGFpbmVyc1xyXG5hdWRpbyxcclxuY2FudmFzLFxyXG5pZnJhbWUsXHJcbmltZyxcclxuc3ZnLFxyXG52aWRlbyB7XHJcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxufVxyXG5cclxuLy8gSW5oZXJpdCBmb250IGZvciBpbnB1dHNcclxuaW5wdXQsXHJcbmJ1dHRvbixcclxudGV4dGFyZWEsXHJcbnNlbGVjdCB7XHJcbiAgZm9udDogaW5oZXJpdDtcclxufVxyXG5cclxuLy8gUmVzZXQgYWxsIENTUyBhbmltYXRpb24gZm9yIHVzZXIsIHdobyBwcmVmZXIgbGVzcyBhbmltYXRpb24gaW4gYnJvd3NlcnNcclxuQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcclxuICAqIHtcclxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4wMW1zICFpbXBvcnRhbnQ7XHJcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxICFpbXBvcnRhbnQ7XHJcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjAxbXMgIWltcG9ydGFudDtcclxuICAgIHNjcm9sbC1iZWhhdmlvcjogYXV0byAhaW1wb3J0YW50O1xyXG4gIH1cclxufVxyXG5cclxuLy8gU29tZSBoZWxwZXIgY2xhc3Nlc1xyXG4vLyBPbGQgSUUgbWVzc2FnZSBibG9ja1xyXG4uYnJvd3NlcnVwZ3JhZGUge1xyXG4gIG1hcmdpbjogMC4yZW0gMDtcclxuICBiYWNrZ3JvdW5kOiAjY2NjO1xyXG4gIGNvbG9yOiAjMDAwO1xyXG4gIHBhZGRpbmc6IDAuMmVtIDA7XHJcbn1cclxuXHJcbi8vIEhpZGUgdmlzdWFsbHkgYW5kIGZyb20gc2NyZWVuIHJlYWRlcnNcclxuLmhpZGRlbiB7XHJcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4vLyBIaWRlIG9ubHkgdmlzdWFsbHksIGJ1dCBoYXZlIGl0IGF2YWlsYWJsZSBmb3Igc2NyZWVuIHJlYWRlcnNcclxuLnZpc3VhbGx5aGlkZGVuIHtcclxuICBib3JkZXI6IDA7XHJcbiAgY2xpcDogcmVjdCgwIDAgMCAwKTtcclxuICBoZWlnaHQ6IDFweDtcclxuICBtYXJnaW46IC0xcHg7XHJcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICBwYWRkaW5nOiAwO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB3aWR0aDogMXB4O1xyXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcbn1cclxuXHJcbi8vIEhpZGUgdmlzdWFsbHkgYW5kIGZyb20gc2NyZWVuIHJlYWRlcnMsIGJ1dCBtYWludGFpbiBsYXlvdXRcclxuLmludmlzaWJsZSB7XHJcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG59XHJcblxyXG4uY29udGFpbmVyIHtcclxuICBAaW5jbHVkZSBjb250YWluZXItbGltKDEzMDBweCk7XHJcbiAgcGFkZGluZzogMCAxMHB4O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG5cclxuLmRlc2NyaXB0aW9uIHtcclxuICBAaW5jbHVkZSBjc3MtbG9jaygxNCwgMTYsIDMyMCwgMTMwMCwgZm9udC1zaXplLCBweCk7XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICBsaW5lLWhlaWdodDogMTQwJTtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbi5zZWN0aW9uX190aXRsZSB7XHJcbiAgQGluY2x1ZGUgY3NzLWxvY2soMjUsIDQ4LCAzMjAsIDEzMDAsIGZvbnQtc2l6ZSwgcHgpO1xyXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XHJcbiAgbGluZS1oZWlnaHQ6IDEyMCU7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gIGJhY2tncm91bmQ6ICRncmFkaWVudDtcclxuICBib3JkZXItcmFkaXVzOiA1MHB4O1xyXG4gIHBhZGRpbmc6IDEwcHggMzBweDtcclxuICBib3JkZXI6IG5vbmU7XHJcbiAgY29sb3I6ICRjb2xvci13aGl0ZTtcclxuICBmb250LXdlaWdodDogNzAwO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBsaW5lLWhlaWdodDogMS41O1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICB0cmFuc2l0aW9uOiAwLjNzIGVhc2U7XHJcblxyXG4gICY6aG92ZXIge1xyXG4gICAgYm94LXNoYWRvdzogLTVweCAtNXB4IDIwcHggbGlnaHRlbigjNDUxMDQ2LCAxMCksXHJcbiAgICAgIDVweCA1cHggMjBweCBsaWdodGVuKCNERjU5NTAsIDEwKTtcclxuICB9XHJcblxyXG4gICY6YWN0aXZlIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xyXG4gICAgYm94LXNoYWRvdzogbm9uZTtcclxuICB9XHJcbn1cclxuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xuQGltcG9ydC1ub3JtYWxpemU7XG4vKiBjcml0aWNhbDpzdGFydCAqL1xuaHRtbCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbiosXG4qOmJlZm9yZSxcbio6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBpbmhlcml0O1xufVxuXG5ib2R5IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgbWluLXdpZHRoOiAzMjBweDtcbiAgbWluLWhlaWdodDogMTAwdmg7XG4gIG1hcmdpbjogMDtcbiAgY29sb3I6ICNmZmY7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvJywgSGVsdmV0aWNhLCBWZXJkYW5hLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEwMCU7XG4gIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVTcGVlZDtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xufVxuXG5pbnB1dDotd2Via2l0LWF1dG9maWxsLCBpbnB1dDotd2Via2l0LWF1dG9maWxsOmhvdmVyLCBpbnB1dDotd2Via2l0LWF1dG9maWxsOmZvY3VzLCBpbnB1dDotd2Via2l0LWF1dG9maWxsOmFjdGl2ZSB7XG4gIHRyYW5zaXRpb246IGFsbCA1MDAwcyBlYXNlLWluLW91dCAwcztcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYmFja2dyb3VuZC1jb2xvciwgY29sb3I7XG59XG5cbi8qIGNyaXRpY2FsOmVuZCAqL1xuYTpub3QoW2NsYXNzXSkge1xuICB0ZXh0LWRlY29yYXRpb24tc2tpcC1pbms6IGF1dG87XG59XG5cbjo6c2VsZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogI2IzZDRmYztcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XG59XG5cbmhyIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogMXB4O1xuICBib3JkZXI6IDA7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjY2NjO1xuICBtYXJnaW46IDFlbSAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG5hdWRpbyxcbmNhbnZhcyxcbmlmcmFtZSxcbmltZyxcbnN2ZyxcbnZpZGVvIHtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbn1cblxuaW5wdXQsXG5idXR0b24sXG50ZXh0YXJlYSxcbnNlbGVjdCB7XG4gIGZvbnQ6IGluaGVyaXQ7XG59XG5cbkBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XG4gICoge1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4wMW1zICFpbXBvcnRhbnQ7XG4gICAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogMSAhaW1wb3J0YW50O1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuMDFtcyAhaW1wb3J0YW50O1xuICAgIHNjcm9sbC1iZWhhdmlvcjogYXV0byAhaW1wb3J0YW50O1xuICB9XG59XG5cbi5icm93c2VydXBncmFkZSB7XG4gIG1hcmdpbjogMC4yZW0gMDtcbiAgYmFja2dyb3VuZDogI2NjYztcbiAgY29sb3I6ICMwMDA7XG4gIHBhZGRpbmc6IDAuMmVtIDA7XG59XG5cbi5oaWRkZW4ge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbi52aXN1YWxseWhpZGRlbiB7XG4gIGJvcmRlcjogMDtcbiAgY2xpcDogcmVjdCgwIDAgMCAwKTtcbiAgaGVpZ2h0OiAxcHg7XG4gIG1hcmdpbjogLTFweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcGFkZGluZzogMDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB3aWR0aDogMXB4O1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xufVxuXG4uaW52aXNpYmxlIHtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuXG4uY29udGFpbmVyIHtcbiAgcGFkZGluZzogMCAxMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTAyNHB4KSB7XG4gIC5jb250YWluZXIge1xuICAgIG1heC13aWR0aDogMTMwMHB4O1xuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgfVxufVxuXG4uZGVzY3JpcHRpb24ge1xuICBmb250LXNpemU6IGNhbGMoMTRweCArICgxNiAtIDE0KSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XG4gIG1hcmdpbjogMDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5kZXNjcmlwdGlvbiB7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLmRlc2NyaXB0aW9uIHtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIH1cbn1cblxuLnNlY3Rpb25fX3RpdGxlIHtcbiAgZm9udC1zaXplOiBjYWxjKDI1cHggKyAoNDggLSAyNSkgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gKDEzMDAgLSAzMjApKSk7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGxpbmUtaGVpZ2h0OiAxMjAlO1xuICBtYXJnaW46IDA7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAzMjBweCkge1xuICAuc2VjdGlvbl9fdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5zZWN0aW9uX190aXRsZSB7XG4gICAgZm9udC1zaXplOiA0OHB4O1xuICB9XG59XG5cbmJ1dHRvbiB7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5NC43OGRlZywgI0RGNTk1MCAxMS4xOSUsICM0NTEwNDYgOTMuNzIlKTtcbiAgYm9yZGVyLXJhZGl1czogNTBweDtcbiAgcGFkZGluZzogMTBweCAzMHB4O1xuICBib3JkZXI6IG5vbmU7XG4gIGNvbG9yOiAjZmZmO1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xufVxuXG5idXR0b246aG92ZXIge1xuICBib3gtc2hhZG93OiAtNXB4IC01cHggMjBweCAjNmUxOTcwLCA1cHggNXB4IDIwcHggI2U3ODI3Yjtcbn1cblxuYnV0dG9uOmFjdGl2ZSB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICBib3gtc2hhZG93OiBub25lO1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKipcXFxyXG4gIEJhc2ljIE1vZGFsIFN0eWxlc1xyXG5cXCoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLm1vZGFsIHtcbiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgYXZlbmlyIG5leHQsIGF2ZW5pciwgaGVsdmV0aWNhIG5ldWUsIGhlbHZldGljYSxcciB1YnVudHUsIHJvYm90bywgbm90bywgc2Vnb2UgdWksIGFyaWFsLCBzYW5zLXNlcmlmO1xufVxuXG4ubW9kYWxfX292ZXJsYXkge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgei1pbmRleDogMTtcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjYpO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLm1vZGFsX19jb250YWluZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBwYWRkaW5nOiAzMHB4O1xuICBtYXgtd2lkdGg6IDUwMHB4O1xuICBtYXgtaGVpZ2h0OiAxMDB2aDtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4ubW9kYWxfX2hlYWRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLm1vZGFsX190aXRsZSB7XG4gIG1hcmdpbi10b3A6IDA7XG4gIG1hcmdpbi1ib3R0b206IDA7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuMjU7XG4gIGNvbG9yOiAjMDA0NDllO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4ubW9kYWxfX2Nsb3NlIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogMDtcbn1cblxuLm1vZGFsX19oZWFkZXIgLm1vZGFsX19jbG9zZTpiZWZvcmUge1xuICBjb250ZW50OiAnXFwyNzE1Jztcbn1cblxuLm1vZGFsX19jb250ZW50IHtcbiAgbWFyZ2luLXRvcDogMnJlbTtcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcbn1cblxuLm1vZGFsX19idG4ge1xuICBmb250LXNpemU6IDAuODc1cmVtO1xuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjtcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBib3JkZXItd2lkdGg6IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIG1hcmdpbjogMDtcbiAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xuICB0cmFuc2l0aW9uOiAtd2Via2l0LXRyYW5zZm9ybSAwLjI1cyBlYXNlLW91dDtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMjVzIGVhc2Utb3V0O1xufVxuXG4ubW9kYWxfX2J0bjpmb2N1cywgLm1vZGFsX19idG46aG92ZXIge1xuICB0cmFuc2Zvcm06IHNjYWxlKDEuMDUpO1xufVxuXG4ubW9kYWxfX2J0bi1wcmltYXJ5IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwNDQ5ZTtcbiAgY29sb3I6ICNmZmY7XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKlxcXHJcbiAgRGVtbyBBbmltYXRpb24gU3R5bGVcclxuXFwqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbkBrZXlmcmFtZXMgbW1mYWRlSW4ge1xuICBmcm9tIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG4gIHRvIHtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG5cbkBrZXlmcmFtZXMgbW1mYWRlT3V0IHtcbiAgZnJvbSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuICB0byB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIG1tc2xpZGVJbiB7XG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxNSUpO1xuICB9XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBtbXNsaWRlT3V0IHtcbiAgZnJvbSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xuICB9XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwJSk7XG4gIH1cbn1cblxuLm1pY3JvbW9kYWwtc2xpZGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4ubWljcm9tb2RhbC1zbGlkZS5pcy1vcGVuIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi5taWNyb21vZGFsLXNsaWRlW2FyaWEtaGlkZGVuPSdmYWxzZSddIC5tb2RhbF9fb3ZlcmxheSB7XG4gIGFuaW1hdGlvbjogbW1mYWRlSW4gMC4zcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTtcbn1cblxuLm1pY3JvbW9kYWwtc2xpZGVbYXJpYS1oaWRkZW49J2ZhbHNlJ10gLm1vZGFsX19jb250YWluZXIge1xuICBhbmltYXRpb246IG1tc2xpZGVJbiAwLjNzIGN1YmljLWJlemllcigwLCAwLCAwLjIsIDEpO1xufVxuXG4ubWljcm9tb2RhbC1zbGlkZVthcmlhLWhpZGRlbj0ndHJ1ZSddIC5tb2RhbF9fb3ZlcmxheSB7XG4gIGFuaW1hdGlvbjogbW1mYWRlT3V0IDAuM3MgY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSk7XG59XG5cbi5taWNyb21vZGFsLXNsaWRlW2FyaWEtaGlkZGVuPSd0cnVlJ10gLm1vZGFsX19jb250YWluZXIge1xuICBhbmltYXRpb246IG1tc2xpZGVPdXQgMC4zcyBjdWJpYy1iZXppZXIoMCwgMCwgMC4yLCAxKTtcbn1cblxuLm1pY3JvbW9kYWwtc2xpZGUgLm1vZGFsX19jb250YWluZXIsXG4ubWljcm9tb2RhbC1zbGlkZSAubW9kYWxfX292ZXJsYXkge1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xufVxuXG4uaWNvbi1tb25vIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBoZWlnaHQ6IDFlbTtcbiAgZmlsbDogY3VycmVudENvbG9yO1xufVxuXG4uZmFjZWJvb2sge1xuICBmb250LXNpemU6IDIuNHJlbTtcbiAgd2lkdGg6IDFlbTtcbn1cblxuLmluc3RhZ3JhbSB7XG4gIGZvbnQtc2l6ZTogMi40cmVtO1xuICB3aWR0aDogMWVtO1xufVxuXG4udmsge1xuICBmb250LXNpemU6IDIuNHJlbTtcbiAgd2lkdGg6IDFlbTtcbn1cblxuLnlvdXR1YmUge1xuICBmb250LXNpemU6IDIuNHJlbTtcbiAgd2lkdGg6IDFlbTtcbn1cblxuLmljb24tbXVsdGkge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGhlaWdodDogMWVtO1xufVxuXG4uaWNvbi1qcyB7XG4gIGZvbnQtc2l6ZTogMzAuOHJlbTtcbiAgd2lkdGg6IDAuNzMwNTJlbTtcbn1cblxuLyogY3JpdGljYWw6c3RhcnQgKi9cbi5uYXZfX3RvcCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDUwcHg7XG4gIHBhZGRpbmc6IDAgODBweDtcbiAgZmxleC13cmFwOiB3cmFwO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gIC5uYXZfX3RvcCB7XG4gICAgcGFkZGluZzogMCA0MHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA4MDBweCkge1xuICAubmF2X190b3Age1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTYwMHB4KSB7XG4gIC5uYXZfX3RvcCB7XG4gICAgbWF4LXdpZHRoOiAxMzAwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gIH1cbn1cblxuLm5hdl9fdG9wIC5sb2dvIHtcbiAgZmxleC1ncm93OiAwLjY7XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbGlzdCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogNTZweDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAubmF2X190b3AgbmF2IC5uYXZfX2xpc3Qge1xuICAgIGdhcDogMjBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogODAwcHgpIHtcbiAgLm5hdl9fdG9wIG5hdiAubmF2X19saXN0IHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbGlzdCAubGlzdF9faXRlbSAuaXRlbV9fbGluayB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMTUwJTtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgei1pbmRleDogMjtcbn1cblxuLm5hdl9fdG9wIG5hdiAubmF2X19saXN0IC5saXN0X19pdGVtIC5pdGVtX19saW5rOjpiZWZvcmUge1xuICBjb250ZW50OiAnJztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IC0xMHB4O1xuICBib3R0b206IC0xMHB4O1xuICByaWdodDogMTUwJTtcbiAgbGVmdDogLTEwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBib3JkZXItcmFkaXVzOiA1MHB4O1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTQuNzhkZWcsICNERjU5NTAgMTEuMTklLCAjNDUxMDQ2IDkzLjcyJSk7XG4gIGFuaW1hdGlvbjogdW5Ib3ZlckJhY2tncm91bmQ7XG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4zcztcbiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcbiAgei1pbmRleDogLTE7XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbGlzdCAubGlzdF9faXRlbSAuaXRlbV9fbGluazpob3Zlcjo6YmVmb3JlIHtcbiAgYW5pbWF0aW9uOiBob3ZlckJhY2tncm91bmQ7XG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4zcztcbiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO1xuICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoO1xufVxuXG5Aa2V5ZnJhbWVzIGhvdmVyQmFja2dyb3VuZCB7XG4gIGZyb20ge1xuICAgIHJpZ2h0OiAxNTAlO1xuICB9XG4gIHRvIHtcbiAgICByaWdodDogLTEwcHg7XG4gIH1cbn1cblxuQGtleWZyYW1lcyB1bkhvdmVyQmFja2dyb3VuZCB7XG4gIGZyb20ge1xuICAgIHJpZ2h0OiAtMTBweDtcbiAgfVxuICB0byB7XG4gICAgcmlnaHQ6IDE1MCU7XG4gIH1cbn1cblxuLm5hdl9fdG9wIG5hdiAubmF2X19tb2JpbGUge1xuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIHotaW5kZXg6IDIwMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAzMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDgwMHB4KSB7XG4gIC5uYXZfX3RvcCBuYXYgLm5hdl9fbW9iaWxlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxufVxuXG4ubmF2X190b3AgbmF2IC5uYXZfX21vYmlsZS5hY3RpdmUge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMyU7XG4gIHJpZ2h0OiA1JTtcbn1cblxuLm5hdl9fdG9wIG5hdiAubmF2X19tb2JpbGUuYWN0aXZlIC5tb2JpbGVfX2J0bjpudGgtb2YtdHlwZSgxKSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbW9iaWxlLmFjdGl2ZSAubW9iaWxlX19idG46bnRoLW9mLXR5cGUoMikge1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCUpIHJvdGF0ZSg0NWRlZyk7XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbW9iaWxlLmFjdGl2ZSAubW9iaWxlX19idG46bnRoLW9mLXR5cGUoMykge1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCUpIHJvdGF0ZSgtNDVkZWcpO1xufVxuXG4ubmF2X190b3AgbmF2IC5uYXZfX21vYmlsZS5hY3RpdmUgLm1vYmlsZV9fYmxvY2sge1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbW9iaWxlIC5tb2JpbGVfX2J0biB7XG4gIHotaW5kZXg6IDEwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHdpZHRoOiAzMHB4O1xuICBoZWlnaHQ6IDJweDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIHRyYW5zaXRpb246IGFsbCAwLjVzO1xufVxuXG4ubmF2X190b3AgbmF2IC5uYXZfX21vYmlsZSAubW9iaWxlX19idG46bnRoLW9mLXR5cGUoMikge1xuICB0b3A6IGNhbGMoNTAlIC0gN3B4KTtcbn1cblxuLm5hdl9fdG9wIG5hdiAubmF2X19tb2JpbGUgLm1vYmlsZV9fYnRuOm50aC1vZi10eXBlKDMpIHtcbiAgdG9wOiBjYWxjKDUwJSArIDdweCk7XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbW9iaWxlIC5tb2JpbGVfX2Jsb2NrIHtcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xuICBkaXNwbGF5OiBmbGV4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwYWRkaW5nOiAxNXB4O1xuICBvdmVyZmxvdy15OiBoaWRkZW47XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcbiAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgYmFja2dyb3VuZDogIzAwMDtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNXM7XG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbW9iaWxlIC5tb2JpbGVfX2Jsb2NrIC5uYXZfX2xpc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDUwcHg7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5uYXZfX3RvcCBuYXYgLm5hdl9fbW9iaWxlIC5tb2JpbGVfX2Jsb2NrIC5uYXZfX2xpc3QgLml0ZW1zX19saW5rIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGNvbG9yOiAjZmZmO1xuICBmb250LXNpemU6IDEuODc1cmVtO1xuICBsaW5lLWhlaWdodDogMS41O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG59XG5cbi8qIGNyaXRpY2FsOmVuZCAqL1xuLnBhZ2UtZm9vdGVyIHtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbi5wYWdlLWZvb3RlciBwIHtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICBtYXJnaW46IDExMHB4IDA7XG59XG5cbi8qIGNyaXRpY2FsOnN0YXJ0ICovXG4uZmlyc3RfX2Jsb2NrIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1nL21haW4tc2NyZWVuX19iZ2MucG5nXCIpO1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWcvbWFpbi1zY3JlZW5fX2JnYy53ZWJwXCIpO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICBiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6IGZpeGVkO1xuICBoZWlnaHQ6IDEwMHZoO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nLXRvcDogMTBweDtcbiAgbWFyZ2luLWJvdHRvbTogMjAwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgLmZpcnN0X19ibG9jayB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHtcbiAgLmZpcnN0X19ibG9jayB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTAwcHg7XG4gIH1cbn1cblxuLmZpcnN0X19ibG9jayAuY29udGFpbmVyIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDEzMHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDUwcHgpO1xuICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgcGFkZGluZy1yaWdodDogY2FsYyg1cHggKyAoNzAgLSA1KSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciB7XG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLmZpcnN0X19ibG9jayAuY29udGFpbmVyIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiA3MHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgLmZpcnN0X19ibG9jayAuY29udGFpbmVyIHtcbiAgICBhbGlnbi1pdGVtczogZW5kO1xuICB9XG59XG5cbi5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiA1MHB4O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDUwcHgpIHtcbiAgLmZpcnN0X19ibG9jayAuY29udGFpbmVyIC50aXRsZV9hbmRfdGltZXIge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB9XG59XG5cbi5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aXRsZSB7XG4gIGZvbnQtc2l6ZTogY2FsYygyNXB4ICsgKDY0IC0gMjUpICogKCgxMDB2dyAtIDMyMHB4KSAvICgxMzAwIC0gMzIwKSkpO1xuICBtYXgtd2lkdGg6IGNhbGMoMzAwcHggKyAoOTIwIC0gMzAwKSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgZm9udC13ZWlnaHQ6IDgwMDtcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XG4gIG1hcmdpbjogMDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aXRsZSB7XG4gICAgZm9udC1zaXplOiAyNXB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLmZpcnN0X19ibG9jayAuY29udGFpbmVyIC50aXRsZV9hbmRfdGltZXIgLnRpdGxlIHtcbiAgICBmb250LXNpemU6IDY0cHg7XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aXRsZSB7XG4gICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aXRsZSB7XG4gICAgbWF4LXdpZHRoOiA5MjBweDtcbiAgfVxufVxuXG4uZmlyc3RfX2Jsb2NrIC5jb250YWluZXIgLnRpdGxlX2FuZF90aW1lciAudGltZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDMwcHg7XG4gIGZsZXgtZ3JvdzogMTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDQwMHB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aW1lciB7XG4gICAgZ2FwOiAxMHB4O1xuICB9XG59XG5cbi5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aW1lcl9fYmxvY2sge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxMHB4O1xuICB3aWR0aDogMTAycHg7XG4gIGhlaWdodDogMTEycHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjEyMTI7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MjRweCkge1xuICAuZmlyc3RfX2Jsb2NrIC5jb250YWluZXIgLnRpdGxlX2FuZF90aW1lciAudGltZXJfX2Jsb2NrIHtcbiAgICB3aWR0aDogNzBweDtcbiAgICBoZWlnaHQ6IDExMnB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAzODlweCkge1xuICAuZmlyc3RfX2Jsb2NrIC5jb250YWluZXIgLnRpdGxlX2FuZF90aW1lciAudGltZXJfX2Jsb2NrIHtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICB9XG59XG5cbi5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aW1lcl9fYmxvY2sgLmJsb2NrX192YWx1ZSB7XG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGZvbnQtc2l6ZTogMzZweDtcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzg5cHgpIHtcbiAgLmZpcnN0X19ibG9jayAuY29udGFpbmVyIC50aXRsZV9hbmRfdGltZXIgLnRpbWVyX19ibG9jayAuYmxvY2tfX3ZhbHVlIHtcbiAgICBmb250LXNpemU6IDMwcHg7XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDM0NXB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aW1lcl9fYmxvY2sgLmJsb2NrX192YWx1ZSB7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICB9XG59XG5cbi5maXJzdF9fYmxvY2sgLmNvbnRhaW5lciAudGl0bGVfYW5kX3RpbWVyIC50aW1lcl9fYmxvY2sgLmJsb2NrX190eXBlIHtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMTQwJTtcbiAgb3BhY2l0eTogMC40O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzg5cHgpIHtcbiAgLmZpcnN0X19ibG9jayAuY29udGFpbmVyIC50aXRsZV9hbmRfdGltZXIgLnRpbWVyX19ibG9jayAuYmxvY2tfX3R5cGUge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzQ1cHgpIHtcbiAgLmZpcnN0X19ibG9jayAuY29udGFpbmVyIC50aXRsZV9hbmRfdGltZXIgLnRpbWVyX19ibG9jayAuYmxvY2tfX3R5cGUge1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgfVxufVxuXG4uZmlyc3RfX2Jsb2NrIC5vcmRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGhlaWdodDogbWF4LWNvbnRlbnQ7XG4gIGJhY2tncm91bmQtY29sb3I6ICMxMjEyMTI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDIwcHggODFweDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBwYWRkaW5nOiAyMHB4O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMTEyOXB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLm9yZGVyIHtcbiAgICBwYWRkaW5nOiA1MHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA2MDhweCkge1xuICAuZmlyc3RfX2Jsb2NrIC5vcmRlcl9fYnV0dG9uIHtcbiAgICBvcmRlcjogMztcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNjA4cHgpIHtcbiAgLmZpcnN0X19ibG9jayAub3JkZXJfX2NvdW50IHtcbiAgICBvcmRlcjogMTtcbiAgfVxufVxuXG4uZmlyc3RfX2Jsb2NrIC5vcmRlciAuY291bnRfX3RleHQge1xuICBmb250LXdlaWdodDogNDAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAxNTAlO1xuICBvcGFjaXR5OiAwLjQ7XG4gIHBhZGRpbmctcmlnaHQ6IDMwcHg7XG59XG5cbi5maXJzdF9fYmxvY2sgLm9yZGVyIC5jb3VudF9fdmFsdWUge1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAxNTAlO1xufVxuXG4uZmlyc3RfX2Jsb2NrIC5vcmRlcl9fbW9uZXkge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDhweDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDYwOHB4KSB7XG4gIC5maXJzdF9fYmxvY2sgLm9yZGVyX19tb25leSB7XG4gICAgb3JkZXI6IDI7XG4gIH1cbn1cblxuLmZpcnN0X19ibG9jayAub3JkZXJfX21vbmV5IC50ZXh0IHtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMTUwJTtcbiAgb3BhY2l0eTogMC40O1xuICBwYWRkaW5nLXJpZ2h0OiAzMHB4O1xufVxuXG4uZmlyc3RfX2Jsb2NrIC5vcmRlcl9fbW9uZXkgLmNvdW50IHtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMTUwJTtcbn1cblxuLmZpcnN0X19ibG9jayAub3JkZXJfX21vbmV5IC5wcm9ncmVzcy1iYXIge1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gIHdpZHRoOiA3NTBweDtcbiAgaGVpZ2h0OiA2cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDEzNjZweCkge1xuICAuZmlyc3RfX2Jsb2NrIC5vcmRlcl9fbW9uZXkgLnByb2dyZXNzLWJhciB7XG4gICAgd2lkdGg6IDUwMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA2MDhweCkge1xuICAuZmlyc3RfX2Jsb2NrIC5vcmRlcl9fbW9uZXkgLnByb2dyZXNzLWJhciB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxufVxuXG4uZmlyc3RfX2Jsb2NrIC5vcmRlcl9fbW9uZXkgLnByb2dyZXNzLWJhcjo6YmVmb3JlIHtcbiAgY29udGVudDogJzAnO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTFweDtcbiAgbGVmdDogMDtcbiAgb3BhY2l0eTogMC40O1xufVxuXG4uZmlyc3RfX2Jsb2NrIC5vcmRlcl9fbW9uZXkgLnByb2dyZXNzLWJhcjo6YWZ0ZXIge1xuICBjb250ZW50OiAnMSAwMDAgMDAw4oK9JztcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDExcHg7XG4gIHJpZ2h0OiAwO1xuICBvcGFjaXR5OiAwLjQ7XG59XG5cbi5maXJzdF9fYmxvY2sgLm9yZGVyX19tb25leSAucHJvZ3Jlc3MtYmFyID4gc3BhbiB7XG4gIHdpZHRoOiA2MCU7XG4gIGhlaWdodDogaW5oZXJpdDtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDk0Ljc4ZGVnLCAjREY1OTUwIDExLjE5JSwgIzQ1MTA0NiA5My43MiUpO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWluZGVudDogLTk5OTlweDtcbn1cblxuLyogY3JpdGljYWw6ZW5kICovXG4uc2Vjb25kX19ibG9jayB7XG4gIG1hcmdpbi1ib3R0b206IGNhbGMoMTAwcHggKyAoMjAwIC0gMTAwKSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5zZWNvbmRfX2Jsb2NrIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMDBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5zZWNvbmRfX2Jsb2NrIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMDBweDtcbiAgfVxufVxuXG4uc2Vjb25kX19ibG9jayAuY29udGVudCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogY2FsYygxMHB4ICsgKDE0MCAtIDEwKSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5zZWNvbmRfX2Jsb2NrIC5jb250ZW50IHtcbiAgICBnYXA6IDEwcHg7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAuc2Vjb25kX19ibG9jayAuY29udGVudCB7XG4gICAgZ2FwOiAxNDBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTcwcHgpIHtcbiAgLnNlY29uZF9fYmxvY2sgLmNvbnRlbnQge1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgfVxufVxuXG4uc2Vjb25kX19ibG9jayAuY29udGVudCAuY29udGVudF9fbGVmdCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiBjYWxjKDIwMHB4ICsgKDUwMCAtIDIwMCkgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gKDEzMDAgLSAzMjApKSk7XG4gIG1pbi13aWR0aDogY2FsYygyMDBweCArICg0OTkgLSAyMDApICogKCgxMDB2dyAtIDMyMHB4KSAvICgxMzAwIC0gMzIwKSkpO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNDODlBRkMsICM3QzZBRkEpO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzIwcHgpIHtcbiAgLnNlY29uZF9fYmxvY2sgLmNvbnRlbnQgLmNvbnRlbnRfX2xlZnQge1xuICAgIGhlaWdodDogMjAwcHg7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAuc2Vjb25kX19ibG9jayAuY29udGVudCAuY29udGVudF9fbGVmdCB7XG4gICAgaGVpZ2h0OiA1MDBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzIwcHgpIHtcbiAgLnNlY29uZF9fYmxvY2sgLmNvbnRlbnQgLmNvbnRlbnRfX2xlZnQge1xuICAgIG1pbi13aWR0aDogMjAwcHg7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAuc2Vjb25kX19ibG9jayAuY29udGVudCAuY29udGVudF9fbGVmdCB7XG4gICAgbWluLXdpZHRoOiA0OTlweDtcbiAgfVxufVxuXG4uc2Vjb25kX19ibG9jayAuY29udGVudCAuY29udGVudF9fbGVmdDo6YmVmb3JlIHtcbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAzMHB4O1xuICBsZWZ0OiAzMHB4O1xuICByaWdodDogMzBweDtcbiAgYm90dG9tOiAzMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbn1cblxuLnNlY29uZF9fYmxvY2sgLmNvbnRlbnQgLmNvbnRlbnRfX2xlZnQgLnN5c3RlbV9fYmxvY2sge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDclO1xuICBib3R0b206IC00MHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIG1heC13aWR0aDogNDQ2cHg7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLnNlY29uZF9fYmxvY2sgLmNvbnRlbnQgLmNvbnRlbnRfX3JpZ2h0IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiBjYWxjKDEwcHggKyAoNDUgLSAxMCkgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gKDEzMDAgLSAzMjApKSk7XG4gIHotaW5kZXg6IDI7XG4gIHBhZGRpbmctbGVmdDogMTBweDtcbiAgcGFkZGluZy1yaWdodDogMTBweDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5zZWNvbmRfX2Jsb2NrIC5jb250ZW50IC5jb250ZW50X19yaWdodCB7XG4gICAgZ2FwOiAxMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLnNlY29uZF9fYmxvY2sgLmNvbnRlbnQgLmNvbnRlbnRfX3JpZ2h0IHtcbiAgICBnYXA6IDQ1cHg7XG4gIH1cbn1cblxuLnRoaXJkX19ibG9jayB7XG4gIG1hcmdpbi1ib3R0b206IDIwMHB4O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHtcbiAgLnRoaXJkX19ibG9jayB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTAwcHg7XG4gIH1cbn1cblxuLnRoaXJkX19ibG9jayAuY29udGFpbmVyX190aXRsZSB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnI7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xuICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcImljb24gdGl0bGVcIiBcImRlc2NyIGRlc2NyXCI7XG4gIGdhcDogNTBweCAyMHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiA4MHB4O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDEwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyX190aXRsZSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXCJpY29uXCIgXCJ0aXRsZVwiIFwiZGVzY3JcIjtcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyX190aXRsZSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIGF1dG87XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZ2FwOiAzMHB4IDA7XG4gIH1cbn1cblxuLnRoaXJkX19ibG9jayAuY29udGFpbmVyX190aXRsZSAuaWNvbiB7XG4gIGdyaWQtYXJlYTogaWNvbjtcbn1cblxuLnRoaXJkX19ibG9jayAuY29udGFpbmVyX190aXRsZSAuc2VjdGlvbl9fdGl0bGUge1xuICBncmlkLWFyZWE6IHRpdGxlO1xufVxuXG4udGhpcmRfX2Jsb2NrIC5jb250YWluZXJfX3RpdGxlIC5kZXNjcmlwdGlvbiB7XG4gIGdyaWQtYXJlYTogZGVzY3I7XG4gIG1heC13aWR0aDogNDExcHg7XG4gIG9wYWNpdHk6IDAuNSAhaW1wb3J0YW50O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTAwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyX190aXRsZSAuZGVzY3JpcHRpb24ge1xuICAgIG1heC13aWR0aDogOTAlO1xuICB9XG59XG5cbi50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSBhbmQgKG1heC13aWR0aDogNDEwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIHtcbiAgICBnYXA6IDIwcHg7XG4gIH1cbn1cblxuLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5mbG9vciB7XG4gIHdpZHRoOiAzMjRweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBnYXA6IDIwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLmZsb29yIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMjAwcHg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDEwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5mbG9vciB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBnYXA6IDVweDtcbiAgfVxufVxuXG4udGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnBlcmNlbnQge1xuICBmb250LXdlaWdodDogNzAwO1xuICBmb250LXNpemU6IGNhbGMoMjBweCArICgzNiAtIDIwKSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XG4gIG1hcmdpbjogMDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAucGVyY2VudCB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wZXJjZW50IHtcbiAgICBmb250LXNpemU6IDM2cHg7XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDUyMHB4KSB7XG4gIC50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAucGVyY2VudCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxufVxuXG4udGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLmRlc2NyaXB0aW9uIHtcbiAgb3BhY2l0eTogMC41ICFpbXBvcnRhbnQ7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLmRlc2NyaXB0aW9uIHtcbiAgICBtYXgtd2lkdGg6IDQwJTtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDEwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5kZXNjcmlwdGlvbiB7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICB9XG59XG5cbi50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAuY29sb3JfYmxvY2sge1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTQuMjZkZWcsICNDODlBRkMgOS41MSUsICM3QzZBRkEgOTAuMjMlKTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gIC50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAuY29sb3JfYmxvY2sge1xuICAgIG1pbi13aWR0aDogMjAwcHg7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA0MTBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLmNvbG9yX2Jsb2NrIHtcbiAgICBtaW4td2lkdGg6IDk1JTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xuICB9XG59XG5cbi50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAucDEwMCAuY29sb3JfYmxvY2sge1xuICBoZWlnaHQ6IDgwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnAxMDAgLmNvbG9yX2Jsb2NrIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wMTAwIC5jb2xvcl9ibG9jazo6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnMTAwJSc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICBmb250LXNpemU6IGNhbGMoMjBweCArICgzNiAtIDIwKSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgtMSwgLTEpO1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkgYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAucDEwMCAuY29sb3JfYmxvY2s6OmJlZm9yZSB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkgYW5kIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnAxMDAgLmNvbG9yX2Jsb2NrOjpiZWZvcmUge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgfVxufVxuXG4udGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnA3NSAuY29sb3JfYmxvY2sge1xuICBoZWlnaHQ6IDYwcHg7XG4gIHRyYW5zZm9ybTogbWF0cml4KC0xLCAwLCAwLCAxLCAwLCAwKTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDcwMHB4KSB7XG4gIC50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAucDc1IC5jb2xvcl9ibG9jayB7XG4gICAgdHJhbnNmb3JtOiBtYXRyaXgoLTEsIDAsIDAsIDEsIDAsIDApIHJvdGF0ZSgtOTBkZWcpO1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnA3NSAuY29sb3JfYmxvY2sge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnA3NSAuY29sb3JfYmxvY2s6OmJlZm9yZSB7XG4gICAgY29udGVudDogJzc1JSc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICBmb250LXNpemU6IGNhbGMoMjBweCArICgzNiAtIDIwKSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgxLCAtMSk7XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDUyMHB4KSBhbmQgKG1heC13aWR0aDogMzIwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wNzUgLmNvbG9yX2Jsb2NrOjpiZWZvcmUge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTIwcHgpIGFuZCAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wNzUgLmNvbG9yX2Jsb2NrOjpiZWZvcmUge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDEwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wNzUgLmNvbG9yX2Jsb2NrIHtcbiAgICB0cmFuc2Zvcm06IG1hdHJpeCgtMSwgMCwgMCwgMSwgMCwgMCkgcm90YXRlKDE4MGRlZyk7XG4gIH1cbn1cblxuLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wNTAgLmNvbG9yX2Jsb2NrIHtcbiAgaGVpZ2h0OiAzMHB4O1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTIwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wNTAgLmNvbG9yX2Jsb2NrIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIH1cbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5wNTAgLmNvbG9yX2Jsb2NrOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICc1MCUnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgbGVmdDogNTAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgZm9udC1zaXplOiBjYWxjKDIwcHggKyAoMzYgLSAyMCkgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gKDEzMDAgLSAzMjApKSk7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgc2NhbGUoLTEsIC0xKTtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTIwcHgpIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnA1MCAuY29sb3JfYmxvY2s6OmJlZm9yZSB7XG4gICAgZm9udC1zaXplOiAyMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkgYW5kIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLnA1MCAuY29sb3JfYmxvY2s6OmJlZm9yZSB7XG4gICAgZm9udC1zaXplOiAzNnB4O1xuICB9XG59XG5cbi50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAuZmluYWwgLmNvbG9yX2Jsb2NrIHtcbiAgaGVpZ2h0OiAxMHB4O1xuICB0cmFuc2Zvcm06IG1hdHJpeCgtMSwgMCwgMCwgMSwgMCwgMCk7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLmZpbmFsIC5jb2xvcl9ibG9jayB7XG4gICAgdHJhbnNmb3JtOiBtYXRyaXgoLTEsIDAsIDAsIDEsIDAsIDApIHJvdGF0ZSgtOTBkZWcpO1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MjBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLmZpbmFsIC5jb2xvcl9ibG9jayB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG4gIC50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAuZmluYWwgLmNvbG9yX2Jsb2NrOjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICfQmNGC0L7Qs9C+JztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNTAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGZvbnQtc2l6ZTogY2FsYygyMHB4ICsgKDM2IC0gMjApICogKCgxMDB2dyAtIDMyMHB4KSAvICgxMzAwIC0gMzIwKSkpO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDEsIC0xKTtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTIwcHgpIGFuZCAobWF4LXdpZHRoOiAzMjBweCkge1xuICAudGhpcmRfX2Jsb2NrIC5jb250YWluZXIgLnNreXNjcmFwZXIgLmZpbmFsIC5jb2xvcl9ibG9jazo6YmVmb3JlIHtcbiAgICBmb250LXNpemU6IDIwcHg7XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDUyMHB4KSBhbmQgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC50aGlyZF9fYmxvY2sgLmNvbnRhaW5lciAuc2t5c2NyYXBlciAuZmluYWwgLmNvbG9yX2Jsb2NrOjpiZWZvcmUge1xuICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDEwcHgpIHtcbiAgLnRoaXJkX19ibG9jayAuY29udGFpbmVyIC5za3lzY3JhcGVyIC5maW5hbCAuY29sb3JfYmxvY2sge1xuICAgIHRyYW5zZm9ybTogbWF0cml4KC0xLCAwLCAwLCAxLCAwLCAwKSByb3RhdGUoLTE4MGRlZyk7XG4gIH1cbn1cblxuLmZvdXJ0aF9fY29udGFpbmVyIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG87XG4gIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFwidGl0bGUgdGl0bGUgdGl0bGVcIiBcImNvbXAgZmxhc2ggdXNiXCI7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogMjAwcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAuZm91cnRoX19jb250YWluZXIge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcInRpdGxlXCIgXCJjb21wXCIgXCJmbGFzaFwiIFwidXNiXCI7XG4gICAgZ2FwOiAzMHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xuICB9XG59XG5cbi5mb3VydGhfX2NvbnRhaW5lciAuc2VjdGlvbl9fdGl0bGUge1xuICBncmlkLWFyZWE6IHRpdGxlO1xuICBtYXJnaW4tYm90dG9tOiBjYWxjKDUwcHggKyAoMTIwIC0gNTApICogKCgxMDB2dyAtIDMyMHB4KSAvICgxMzAwIC0gMzIwKSkpO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzIwcHgpIHtcbiAgLmZvdXJ0aF9fY29udGFpbmVyIC5zZWN0aW9uX190aXRsZSB7XG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5mb3VydGhfX2NvbnRhaW5lciAuc2VjdGlvbl9fdGl0bGUge1xuICAgIG1hcmdpbi1ib3R0b206IDEyMHB4O1xuICB9XG59XG5cbi5mb3VydGhfX2NvbnRhaW5lciAuYWR2YW50YWdlIHtcbiAgbWF4LXdpZHRoOiBjYWxjKDIwMHB4ICsgKDM1OCAtIDIwMCkgKiAoKDEwMHZ3IC0gNzAwcHgpIC8gKDEzMDAgLSA3MDApKSk7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAuZm91cnRoX19jb250YWluZXIgLmFkdmFudGFnZSB7XG4gICAgbWF4LXdpZHRoOiAyMDBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5mb3VydGhfX2NvbnRhaW5lciAuYWR2YW50YWdlIHtcbiAgICBtYXgtd2lkdGg6IDM1OHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAuZm91cnRoX19jb250YWluZXIgLmFkdmFudGFnZSB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcImljb25cIiBcInRpdGxlXCIgXCJ0ZXh0XCI7XG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xuICAgIG1heC13aWR0aDogOTAlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBnYXA6IDEwcHggMjBweDtcbiAgfVxufVxuXG4uZm91cnRoX19jb250YWluZXIgLmFkdmFudGFnZV9fdGl0bGUge1xuICBncmlkLWFyZWE6IHRpdGxlO1xuICBtYXJnaW4tdG9wOiA2MHB4O1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBmb250LXNpemU6IGNhbGMoMThweCArICgyNCAtIDE4KSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XG4gIGxldHRlci1zcGFjaW5nOiAxcHg7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAzMjBweCkge1xuICAuZm91cnRoX19jb250YWluZXIgLmFkdmFudGFnZV9fdGl0bGUge1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5mb3VydGhfX2NvbnRhaW5lciAuYWR2YW50YWdlX190aXRsZSB7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xuICAuZm91cnRoX19jb250YWluZXIgLmFkdmFudGFnZV9fdGl0bGUge1xuICAgIG1hcmdpbi10b3A6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgfVxufVxuXG4uZm91cnRoX19jb250YWluZXIgLmFkdmFudGFnZV9fdGV4dCB7XG4gIGdyaWQtYXJlYTogdGV4dDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBsaW5lLWhlaWdodDogMTYwJTtcbiAgb3BhY2l0eTogMC41O1xuICBtYXJnaW46IDA7XG59XG5cbi5mb3VydGhfX2NvbnRhaW5lciAuY29tcCB7XG4gIGdyaWQtYXJlYTogY29tcDtcbn1cblxuLmZvdXJ0aF9fY29udGFpbmVyIC5mbGFzaCB7XG4gIGdyaWQtYXJlYTogZmxhc2g7XG59XG5cbi5mb3VydGhfX2NvbnRhaW5lciAudXNiIHtcbiAgZ3JpZC1hcmVhOiB1c2I7XG59XG5cbi5mb3VydGhfX2NvbnRhaW5lciBwaWN0dXJlIHtcbiAgZ3JpZC1hcmVhOiBpY29uO1xufVxuXG4uZmlmdGhfX2Jsb2NrIHtcbiAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XG59XG5cbi5maWZ0aF9fYmxvY2sgLmNvbnRhaW5lcl9fdGl0bGUge1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xufVxuXG4uZmlmdGhfX2Jsb2NrIC5jb250YWluZXJfX3RpdGxlIC5pY29uIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgLTEpO1xufVxuXG4uZmlmdGhfX2Jsb2NrIC5wYXJ0bmVycyB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIDFmcik7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMTI4MHB4KSB7XG4gIC5maWZ0aF9fYmxvY2sgLnBhcnRuZXJzIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCA1MCUpO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDQsIGF1dG8pO1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTQ1cHgpIHtcbiAgLmZpZnRoX19ibG9jayAucGFydG5lcnMge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcbiAgICBnYXA6IDEwcHg7XG4gIH1cbn1cblxuLmZpZnRoX19ibG9jayAucGFydG5lcnMgLnBhcnRuZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXgtd2lkdGg6IDMyMHB4O1xuICBoZWlnaHQ6IDE1MHB4O1xuICBwYWRkaW5nLXJpZ2h0OiBjYWxjKDIwcHggKyAoNjUgLSAyMCkgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gKDEzMDAgLSAzMjApKSk7XG4gIHBhZGRpbmctbGVmdDogY2FsYygyMHB4ICsgKDY1IC0gMjApICogKCgxMDB2dyAtIDMyMHB4KSAvICgxMzAwIC0gMzIwKSkpO1xuICBwYWRkaW5nLXRvcDogY2FsYyg1cHggKyAoMzAgLSA1KSAqICgoMTAwdncgLSAzMjBweCkgLyAoMTMwMCAtIDMyMCkpKTtcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoNXB4ICsgKDMwIC0gNSkgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gKDEzMDAgLSAzMjApKSk7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5maWZ0aF9fYmxvY2sgLnBhcnRuZXJzIC5wYXJ0bmVyIHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLmZpZnRoX19ibG9jayAucGFydG5lcnMgLnBhcnRuZXIge1xuICAgIHBhZGRpbmctcmlnaHQ6IDY1cHg7XG4gIH1cbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDMyMHB4KSB7XG4gIC5maWZ0aF9fYmxvY2sgLnBhcnRuZXJzIC5wYXJ0bmVyIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAuZmlmdGhfX2Jsb2NrIC5wYXJ0bmVycyAucGFydG5lciB7XG4gICAgcGFkZGluZy1sZWZ0OiA2NXB4O1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAzMjBweCkge1xuICAuZmlmdGhfX2Jsb2NrIC5wYXJ0bmVycyAucGFydG5lciB7XG4gICAgcGFkZGluZy10b3A6IDVweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5maWZ0aF9fYmxvY2sgLnBhcnRuZXJzIC5wYXJ0bmVyIHtcbiAgICBwYWRkaW5nLXRvcDogMzBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzIwcHgpIHtcbiAgLmZpZnRoX19ibG9jayAucGFydG5lcnMgLnBhcnRuZXIge1xuICAgIHBhZGRpbmctYm90dG9tOiA1cHg7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAuZmlmdGhfX2Jsb2NrIC5wYXJ0bmVycyAucGFydG5lciB7XG4gICAgcGFkZGluZy1ib3R0b206IDMwcHg7XG4gIH1cbn1cblxuLmZpZnRoX19ibG9jayAucGFydG5lcnMgLnBhcnRuZXIgcGljdHVyZSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi5maWZ0aF9fYmxvY2sgLnBhcnRuZXJzIC5wYXJ0bmVyOm50aC1jaGlsZChuICsgNSkge1xuICBib3JkZXItYm90dG9tOiBub25lO1xufVxuXG4uZmlmdGhfX2Jsb2NrIC5wYXJ0bmVycyAucGFydG5lcjpudGgtY2hpbGQoOCksIC5maWZ0aF9fYmxvY2sgLnBhcnRuZXJzIC5wYXJ0bmVyOm50aC1jaGlsZCg0KSB7XG4gIGJvcmRlci1yaWdodDogbm9uZTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDEyODBweCkge1xuICAuZmlmdGhfX2Jsb2NrIC5wYXJ0bmVycyAucGFydG5lciwgLmZpZnRoX19ibG9jayAucGFydG5lcnMgLnBhcnRuZXI6bnRoLWNoaWxkKG4gKyA1KSwgLmZpZnRoX19ibG9jayAucGFydG5lcnMgLnBhcnRuZXI6bnRoLWNoaWxkKDgpLCAuZmlmdGhfX2Jsb2NrIC5wYXJ0bmVycyAucGFydG5lcjpudGgtY2hpbGQoNCkge1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcbiAgfVxufVxuXG4uc2l4dGhfX2Jsb2NrIHtcbiAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XG59XG5cbi5zaXh0aF9fYmxvY2sgLmNvbnRhaW5lcl9fdGl0bGUge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDMwcHg7XG4gIG1hcmdpbi1ib3R0b206IDgwcHg7XG59XG5cbi5zaXh0aF9fYmxvY2sgLmNvbnRhaW5lcl9fdGl0bGUgLmljb24ge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpO1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5jb250YWluZXJfX3RpdGxlIC5kZXNjcmlwdGlvbiB7XG4gIG1heC13aWR0aDogNDExcHg7XG4gIG9wYWNpdHk6IDAuNSAhaW1wb3J0YW50O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkge1xuICAuc2l4dGhfX2Jsb2NrIC5jb250YWluZXJfX3RpdGxlIC5kZXNjcmlwdGlvbiB7XG4gICAgbWF4LXdpZHRoOiA5MCU7XG4gIH1cbn1cblxuLnNpeHRoX19ibG9jayAucHJvZ3JhbSB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdhcDogY2FsYygxMHB4ICsgKDYwIC0gMTApICogKCgxMDB2dyAtIDMyMHB4KSAvICgxMzAwIC0gMzIwKSkpO1xuICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gNnB4IGF1dG87XG4gIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDcsIGF1dG8pO1xuICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcIndlZWstMSBociAuXCIgXCIuIGhyIHdlZWstMlwiIFwid2Vlay0zIGhyIC5cIiBcIi4gaHIgd2Vlay00XCIgXCJ3ZWVrLTUgaHIgLlwiIFwiLiBociB3ZWVrLTZcIiBcIndlZWstNyBociAuXCI7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAzMjBweCkge1xuICAuc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIHtcbiAgICBnYXA6IDEwcHg7XG4gIH1cbn1cblxuQG1lZGlhIChtaW4td2lkdGg6IDEzMDBweCkge1xuICAuc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIHtcbiAgICBnYXA6IDYwcHg7XG4gIH1cbn1cblxuLnNpeHRoX19ibG9jayAucHJvZ3JhbSBociB7XG4gIGdyaWQtYXJlYTogaHI7XG4gIHdpZHRoOiA2cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDk0LjI2ZGVnLCAjQzg5QUZDIDkuNTElLCAjN0M2QUZBIDkwLjIzJSk7XG59XG5cbi5zaXh0aF9fYmxvY2sgLnByb2dyYW0gLndlZWsge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDEwcHg7XG4gIG1heC13aWR0aDogY2FsYygxMDBweCArICgyNTAgLSAxMDApICogKCgxMDB2dyAtIDMyMHB4KSAvICgxMzAwIC0gMzIwKSkpO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAzMjBweCkge1xuICAuc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrIHtcbiAgICBtYXgtd2lkdGg6IDEwMHB4O1xuICB9XG59XG5cbkBtZWRpYSAobWluLXdpZHRoOiAxMzAwcHgpIHtcbiAgLnNpeHRoX19ibG9jayAucHJvZ3JhbSAud2VlayB7XG4gICAgbWF4LXdpZHRoOiAyNTBweDtcbiAgfVxufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZCgyKSB7XG4gIGdyaWQtYXJlYTogd2Vlay0xO1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZCgzKSB7XG4gIGdyaWQtYXJlYTogd2Vlay0yO1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZCg0KSB7XG4gIGdyaWQtYXJlYTogd2Vlay0zO1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZCg1KSB7XG4gIGdyaWQtYXJlYTogd2Vlay00O1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZCg2KSB7XG4gIGdyaWQtYXJlYTogd2Vlay01O1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZCg3KSB7XG4gIGdyaWQtYXJlYTogd2Vlay02O1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZCg4KSB7XG4gIGdyaWQtYXJlYTogd2Vlay03O1xufVxuXG4uc2l4dGhfX2Jsb2NrIC5wcm9ncmFtIC53ZWVrOm50aC1jaGlsZChldmVuKTo6YmVmb3JlIHtcbiAgY29udGVudDogJyc7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIHJpZ2h0OiAtNjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDJweDtcbiAgb3BhY2l0eTogMC4zO1xuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XG59XG5cbi5zaXh0aF9fYmxvY2sgLnByb2dyYW0gLndlZWs6bnRoLWNoaWxkKG9kZCk6OmJlZm9yZSB7XG4gIGNvbnRlbnQ6ICcnO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiAtNjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiA0MHB4O1xuICBvcGFjaXR5OiAwLjM7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcbn1cblxuLnNpeHRoX19ibG9jayAucHJvZ3JhbSAud2Vla19fdGl0bGUge1xuICBmb250LXdlaWdodDogNDAwO1xuICBmb250LXNpemU6IDE0cHg7XG4gIGxpbmUtaGVpZ2h0OiAxNjAlO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgb3BhY2l0eTogMC41O1xuICBtYXJnaW46IDA7XG59XG5cbi5zaXh0aF9fYmxvY2sgLnByb2dyYW0gLndlZWtfX2Rlc2NyaXB0aW9uIHtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zaXplOiBjYWxjKDE0cHggKyAoMTggLSAxNCkgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gKDEzMDAgLSAzMjApKSk7XG4gIGxpbmUtaGVpZ2h0OiAxNjAlO1xuICB0ZXh0LWFsaWduOiByaWdodDtcbiAgbWFyZ2luOiAwO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMzIwcHgpIHtcbiAgLnNpeHRoX19ibG9jayAucHJvZ3JhbSAud2Vla19fZGVzY3JpcHRpb24ge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1pbi13aWR0aDogMTMwMHB4KSB7XG4gIC5zaXh0aF9fYmxvY2sgLnByb2dyYW0gLndlZWtfX2Rlc2NyaXB0aW9uIHtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gIH1cbn1cblxuLnNldmVudGhfX2Jsb2NrIHtcbiAgbWFyZ2luLWJvdHRvbTogMTUwcHg7XG59XG5cbi5zZXZlbnRoX19ibG9jayAuY29udGFpbmVyX190aXRsZSB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byAxZnI7XG4gIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFwiaWNvbiB0aXRsZVwiO1xuICBnYXA6IDUwcHggMjBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLWJvdHRvbTogODBweDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDQxMHB4KSB7XG4gIC5zZXZlbnRoX19ibG9jayAuY29udGFpbmVyX190aXRsZSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXCJpY29uXCIgXCJ0aXRsZVwiO1xuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgICBtYXgtd2lkdGg6IDkwJTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNzAwcHgpIHtcbiAgLnNldmVudGhfX2Jsb2NrIC5jb250YWluZXJfX3RpdGxlIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gYXV0bztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBnYXA6IDMwcHggMDtcbiAgfVxufVxuXG4uc2V2ZW50aF9fYmxvY2sgLmNvbnRhaW5lcl9fdGl0bGUgLmljb24ge1xuICBncmlkLWFyZWE6IGljb247XG4gIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XG59XG5cbi5zZXZlbnRoX19ibG9jayAuY29udGFpbmVyX190aXRsZSAuc2VjdGlvbl9fdGl0bGUge1xuICBncmlkLWFyZWE6IHRpdGxlO1xufVxuXG4uc2V2ZW50aF9fYmxvY2sgLmNvbnRhaW5lciAudGVhY2hlcnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBnYXA6IDMwcHg7XG59XG5cbi5zZXZlbnRoX19ibG9jayAuY29udGFpbmVyIC50ZWFjaGVycyAudGVhY2hlciB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCg0LCBhdXRvKTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBnYXA6IDIwcHg7XG59XG5cbi5zZXZlbnRoX19ibG9jayAuY29udGFpbmVyIC50ZWFjaGVycyAudGVhY2hlcl9faWNvbiB7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLnNldmVudGhfX2Jsb2NrIC5jb250YWluZXIgLnRlYWNoZXJzIC50ZWFjaGVyX19uYW1lIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4uc2V2ZW50aF9fYmxvY2sgLmNvbnRhaW5lciAudGVhY2hlcnMgLnRlYWNoZXJfX2Rlc2NyaXB0aW9uIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4uc2V2ZW50aF9fYmxvY2sgLmNvbnRhaW5lciAudGVhY2hlcnMgLnRlYWNoZXJfX2JpbyB7XG4gIG1heC13aWR0aDogMTQzcHg7XG59XG5cbi5laWdodF9fYmxvY2sgLmNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiA0MHB4O1xufVxuXG4uZWlnaHRfX2Jsb2NrIC5jb250YWluZXIgLmRlc2NyaXB0aW9uIHtcbiAgb3BhY2l0eTogMC41O1xuICBtYXgtd2lkdGg6IDQxMXB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA1MDBweCkge1xuICAuZWlnaHRfX2Jsb2NrIC5jb250YWluZXIgLmRlc2NyaXB0aW9uIHtcbiAgICBtYXgtd2lkdGg6IDkwJTtcbiAgfVxufVxuXG4uZWlnaHRfX2Jsb2NrIC5jb250YWluZXIgLmZvcm0ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7XG4gIC5laWdodF9fYmxvY2sgLmNvbnRhaW5lciAuZm9ybSB7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBnYXA6IDEwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbn1cblxuLmVpZ2h0X19ibG9jayAuY29udGFpbmVyIC5mb3JtX19pbnB1dCB7XG4gIHdpZHRoOiAzNTNweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBib3JkZXItcmFkaXVzOiA1MHB4IDBweCAwcHggNTBweDtcbiAgcGFkZGluZzogNXB4IDMwcHg7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDY0MHB4KSB7XG4gIC5laWdodF9fYmxvY2sgLmNvbnRhaW5lciAuZm9ybV9faW5wdXQge1xuICAgIHdpZHRoOiAyNTBweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNTAwcHgpIHtcbiAgLmVpZ2h0X19ibG9jayAuY29udGFpbmVyIC5mb3JtX19pbnB1dCB7XG4gICAgd2lkdGg6IDkwJTtcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4IDUwcHg7XG4gIH1cbn1cblxuLmVpZ2h0X19ibG9jayAuY29udGFpbmVyIC5mb3JtX19idXR0b24ge1xuICBtYXJnaW4tbGVmdDogLTI1cHg7XG4gIGhlaWdodDogNDRweDtcbn1cblxuLmVpZ2h0X19ibG9jayAuY29udGFpbmVyIC5zb2NpYWwge1xuICBkaXNwbGF5OiBncmlkO1xuICBnYXA6IDMwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIGF1dG8pO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNDAwcHgpIHtcbiAgLmVpZ2h0X19ibG9jayAuY29udGFpbmVyIC5zb2NpYWwge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgfVxufVxuXG4uZWlnaHRfX2Jsb2NrIC5jb250YWluZXIgLnNvY2lhbF9faWNvbiB7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5NC4yNmRlZywgI0M4OUFGQyA5LjUxJSwgIzdDNkFGQSA5MC4yMyUpO1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA1MHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmVpZ2h0X19ibG9jayAuY29udGFpbmVyIC5zb2NpYWxfX2ljb24gLmxvZ28ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDM7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IGF1dG87XG4gIG9iamVjdC1maXQ6IG5vbmU7XG59XG5cbi5laWdodF9fYmxvY2sgLmNvbnRhaW5lciAuc29jaWFsX19pY29uOjpiZWZvcmUge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDk0LjI2ZGVnLCAjNkI1QURBIDkuNTElLCAjN0M2QUZBIDkwLjIzJSk7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzIGxpbmVhcjtcbiAgb3BhY2l0eTogMDtcbn1cblxuLmVpZ2h0X19ibG9jayAuY29udGFpbmVyIC5zb2NpYWxfX2ljb246aG92ZXI6aG92ZXI6OmJlZm9yZSB7XG4gIG9wYWNpdHk6IDE7XG59XG5cbi5tb2RhbF9fY29udGFpbmVyIHtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDk0Ljc4ZGVnLCAjREY1OTUwIDExLjE5JSwgIzQ1MTA0NiA5My43MiUpO1xufVxuXG4ubW9kYWxfX3RpdGxlLCAubW9kYWxfX2J0biwgLm1vZGFsX19jb250ZW50IHtcbiAgY29sb3I6ICNmZmY7XG59XG5cbi5tb2RhbF9fYnRuIHtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xufVxuXG4ubW9kYWxfX2Nsb3NlIHtcbiAgcGFkZGluZzogMTBweCAxNXB4O1xufVxuXG4ubW9kYWxfX2NvbnRlbnQgZm9ybSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogMjBweDtcbn1cblxuLm1vZGFsX19jb250ZW50IGZvcm0gaW5wdXQge1xuICBwYWRkaW5nOiA1cHggMjBweDtcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcbiAgd2lkdGg6IDk1JTtcbn1cblxuLm1vZGFsIC5tb2RhbDJfX2hlYWRlciB7XG4gIGp1c3RpZnktY29udGVudDogZW5kO1xufVxuXG4ubW9kYWwgI21vZGFsLTItY29udGVudCAubW9kYWwyX19pY29uIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xufVxuXG4ubW9kYWwgI21vZGFsLTItY29udGVudCAuY29udGVudF9faGVhZGVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxMHB4O1xufVxuXG4ubW9kYWwgI21vZGFsLTItY29udGVudCAuY29udGVudF9faGVhZGVyX25hbWUge1xuICBmb250LXNpemU6IDI4cHg7XG59XG5cbi5tb2RhbCAjbW9kYWwtMi1jb250ZW50IC5jb250ZW50X19oZWFkZXJfdGl0bGUge1xuICBmb250LXNpemU6IDIwcHg7XG59XG5cbi5tb2RhbCAjbW9kYWwtMi1jb250ZW50IC5hY3RpdmUge1xuICBkaXNwbGF5OiBibG9jaztcbn1cbiIsbnVsbCwiLy8gQ29sb3JzIHZhcmlhYmxlc1xyXG4kY29sb3Itd2hpdGU6ICNmZmY7XHJcbiRjb2xvci1ibGFjazogIzAwMDtcclxuJGNvbG9yLXBpbms6ICNGRjAwRTU7XHJcbiRzZWNvbmQtYmxhY2s6ICMxMjEyMTI7XHJcbiRncmFkaWVudDogbGluZWFyLWdyYWRpZW50KDk0Ljc4ZGVnLCAjREY1OTUwIDExLjE5JSwgIzQ1MTA0NiA5My43MiUpO1xyXG5cclxuLy8gQmFzZSBmb250IHNpemVcclxuJGJhc2UtZm9udC1zaXplOiAxNnB4ICFkZWZhdWx0O1xyXG5cclxuLy8gQmFzZSBuYXYgaGVpZ2h0XHJcbiRuYXYtaGVpZ2h0OiA1MHB4O1xyXG5cclxuLy8gQnJlYWtwb2ludHMgZm9yIGluY2x1ZGUtbWVkaWEgbWl4aW5zXHJcbiRicmVha3BvaW50czogKFxyXG4gIHBob25lU21hbGw6IDM3NXB4LFxyXG4gIHBob25lUmVnOiA0MTRweCxcclxuICB0YWJsZXRTbWFsbDogNzY4cHgsXHJcbiAgdGFibGV0TWlkOiA4MDBweCxcclxuICB0YWJsZXRSZWc6IDEwMjRweCxcclxuICBkZXNrdG9wU21hbGw6IDEyODBweCxcclxuICBkZXNrdG9wTWlkOiAxMzY2cHgsXHJcbiAgZGVza3RvcFJlZzogMTQ0MHB4LFxyXG4gIGRlc2t0b3BCaWc6IDE2MDBweCxcclxuICBkZXNrdG9wTGFyZ2U6IDE5MjBweCxcclxuKTtcclxuIiwiLy8gQ1NTIExvY2tcclxuLy8gJG1pbi1zaXplOiBtaW5pbXVtIGVsZW1lbnQgJHByb3BlcnR5IHNpemUgaW4gJHVuaXQgc3BlY2lmaWVkXHJcbi8vICRtYXgtc2l6ZTogbWF4aW11bSBlbGVtZW50ICRwcm9wZXJ0eSBzaXplIGluICR1bml0IHNwZWNpZmllZFxyXG4vLyAkbWluLXdpZHRoOiB0aGUgc2NyZWVuIHdpZHRoIGluICR1bml0cyB3aGVyZSB5b3Ugd2FudCB0byBsb2NrIGluIHRoZSAkbWluLXNpemVcclxuLy8gJG1heC13aWR0aDogdGhlIHNjcmVlbiB3aWR0aCBpbiAkdW5pdHMgd2hlcmUgeW91IHdhbnQgdG8gbG9jayBpbiB0aGUgJG1heC1zaXplXHJcbi8vICRwcm9wZXJ0eTogdGhlIHByb3BlcnR5IG9mIHRoZSBlbGVtZW50IHRoYXQgeW91IHdvdWxkIGxpa2UgdG8gc2NhbGUvbG9ja1xyXG4vLyAkdW5pdDogdGhlIHVuaXRzIHdoaWNoIGFsbCBtZWFzdXJlbWVudHMgYXJlIHRha2VuIGluXHJcbkBtaXhpbiBjc3MtbG9jaygkbWluLXNpemU6IDEsXHJcbiAgJG1heC1zaXplOiAxLjQsXHJcbiAgJG1pbi13aWR0aDogMjAsXHJcbiAgJG1heC13aWR0aDogMTAwLFxyXG4gICRwcm9wZXJ0eTogZm9udC1zaXplLFxyXG4gICR1bml0OiByZW0pIHtcclxuICAjeyRwcm9wZXJ0eX06IGNhbGMoI3skbWluLXNpemV9I3skdW5pdH0gKyAoI3skbWF4LXNpemV9IC0gI3skbWluLXNpemV9KSAqICgoMTAwdncgLSAjeyRtaW4td2lkdGh9I3skdW5pdH0pIC8gKCN7JG1heC13aWR0aH0gLSAjeyRtaW4td2lkdGh9KSkpO1xyXG5cclxuICBAbWVkaWEgKG1heC13aWR0aDogI3skbWluLXdpZHRofSN7JHVuaXR9KSB7XHJcbiAgICAjeyRwcm9wZXJ0eX06ICN7JG1pbi1zaXplfSN7JHVuaXR9O1xyXG4gIH1cclxuXHJcbiAgQG1lZGlhIChtaW4td2lkdGg6ICN7JG1heC13aWR0aH0jeyR1bml0fSkge1xyXG4gICAgI3skcHJvcGVydHl9OiAjeyRtYXgtc2l6ZX0jeyR1bml0fTtcclxuICB9XHJcbn1cclxuXHJcbi8vIHNtb290aCBmb250XHJcbkBtaXhpbiBzbW9vdGgtZm9udCB7XHJcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XHJcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcclxufVxyXG5cclxuLy8gdmVydGljYWwtYWxpZ24gYXQgY2VudGVyXHJcbkBtaXhpbiB2Y2VudGVyIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiA1MCU7XHJcbiAgbGVmdDogNTAlO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG59XHJcblxyXG4vLyBjZW50ZXJcclxuQG1peGluIGNlbnRlcigkYXhpcykge1xyXG4gIEBpZiAkYXhpcz09Ym90aCB7XHJcbiAgICBAaW5jbHVkZSB2Y2VudGVyO1xyXG4gIH1cclxuXHJcbiAgQGVsc2UgaWYgJGF4aXM9PWgge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogNTAlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xyXG4gIH1cclxuXHJcbiAgQGVsc2UgaWYgJGF4aXM9PXYge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiA1MCU7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBjbGVhcmZpeFxyXG5AbWl4aW4gY2xyIHtcclxuICAmOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgZGlzcGxheTogdGFibGU7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICB9XHJcbn1cclxuXHJcbi8vIHRyYW5zaXRpb25cclxuQG1peGluIHRyYW5zaXRpb24oJHByb3BlcnR5OiBhbGwsICRkdXJhdGlvbjogMC4ycywgJGVhc2luZzogZWFzZSkge1xyXG4gIHRyYW5zaXRpb246ICRwcm9wZXJ0eSAkZHVyYXRpb24gJGVhc2luZztcclxufVxyXG5cclxuLy8gaW1hZ2VzXHJcbkBtaXhpbiBpbWcoJG1heFdpZHRoOiAxMDAlKSB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWF4LXdpZHRoOiAkbWF4V2lkdGg7XHJcbiAgaGVpZ2h0OiBhdXRvO1xyXG59XHJcblxyXG5AbWl4aW4gY292ZXIge1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiA1MCUgNTAlO1xyXG59XHJcblxyXG4vLyBwZXJmb3JtYW5jZVxyXG5AbWl4aW4gZ3B1IHtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xyXG59XHJcblxyXG4vLyBvbD5saSBjb3VudGVyXHJcbkBtaXhpbiBjb3VudGVyKCR2YXIsICRzZXApIHtcclxuICBjb3VudGVyLXJlc2V0OiBsaXN0ICsgJHZhcjtcclxuXHJcbiAgbGk6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IGNvdW50ZXIobGlzdCArICR2YXIpICRzZXA7XHJcbiAgICBjb3VudGVyLWluY3JlbWVudDogbGlzdCArICR2YXI7XHJcbiAgfVxyXG59XHJcblxyXG4vLyByZXNldCBidXR0b25zXHJcbkBtaXhpbiByZXNldGJ1dHRvbigkcGFkZGluZzogMCkge1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogJHBhZGRpbmc7XHJcbiAgd2lkdGg6IGF1dG87XHJcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIGFwcGVhcmFuY2U6IG5vbmU7XHJcbiAgb3V0bGluZTogbm9uZTtcclxufVxyXG5cclxuLy8gcmVzZXQgZmlyc3QtY2hpbGQvbGFzdC1jaGlsZCBtYXJnaW5zXHJcbkBtaXhpbiBtYXJnaW5jaGlsZHJlc2V0IHtcclxuICAmOmZpcnN0LWNoaWxkIHtcclxuICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgfVxyXG5cclxuICAmOmxhc3QtY2hpbGQge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICB9XHJcbn1cclxuXHJcbi8vIHBhZGRpbmdzIGZvciBjb25hdGluZXJzXHJcbkBtaXhpbiBjb250YWluZXItcGFkIHtcclxuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XHJcbiAgcGFkZGluZy1yaWdodDogMTZweDtcclxuXHJcbiAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0U21hbGwnLCAnPHRhYmxldFJlZycpIHtcclxuICAgIHBhZGRpbmctbGVmdDogNThweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDU4cHg7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBsaW1pdCB3aWR0aCBmb3IgY29udGFpbmVyc1xyXG5AbWl4aW4gY29udGFpbmVyLWxpbSgkd2lkdGg6IDEyMTJweCwgJG1lZGlhOiAnPj10YWJsZXRSZWcnKSB7XHJcbiAgQGluY2x1ZGUgbWVkaWEoJG1lZGlhKSB7XHJcbiAgICBtYXgtd2lkdGg6ICR3aWR0aDtcclxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIHdlYi1raXQtYXV0b2ZpbGwge1xyXG5cclxuICAmOi13ZWJraXQtYXV0b2ZpbGwsXHJcbiAgJjotd2Via2l0LWF1dG9maWxsOmhvdmVyLFxyXG4gICY6LXdlYmtpdC1hdXRvZmlsbDpmb2N1cyxcclxuICAmOi13ZWJraXQtYXV0b2ZpbGw6YWN0aXZlIHtcclxuICAgIHRyYW5zaXRpb246IGFsbCA1MDAwcyBlYXNlLWluLW91dCAwcztcclxuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGJhY2tncm91bmQtY29sb3IsIGNvbG9yO1xyXG4gIH1cclxufVxyXG4iLCIvLyBIZWFkZXIgc3R5bGVzIGJnblxyXG4vKiBjcml0aWNhbDpzdGFydCAqL1xyXG4ubmF2X190b3Age1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6ICRuYXYtaGVpZ2h0O1xyXG4gIHBhZGRpbmc6IDAgODBweDtcclxuICBmbGV4LXdyYXA6IHdyYXA7XHJcblxyXG4gIEBpbmNsdWRlIG1lZGlhKCc8PXRhYmxldFJlZycpIHtcclxuICAgIHBhZGRpbmc6IDAgNDBweDtcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIG1lZGlhKCc8PXRhYmxldE1pZCcpIHtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIG1lZGlhKCc+PWRlc2t0b3BCaWcnKSB7XHJcbiAgICBtYXgtd2lkdGg6IDEzMDBweDtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gIH1cclxuXHJcbiAgLmxvZ28ge1xyXG4gICAgZmxleC1ncm93OiAwLjY7XHJcbiAgfVxyXG5cclxuICBuYXYge1xyXG4gICAgLm5hdl9fbGlzdCB7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGdhcDogNTZweDtcclxuICAgICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgICAgcGFkZGluZzogMDtcclxuXHJcbiAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PXRhYmxldFJlZycpIHtcclxuICAgICAgICBnYXA6IDIwcHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PXRhYmxldE1pZCcpIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAubGlzdF9faXRlbSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLml0ZW1fX2xpbmsge1xyXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxNTAlO1xyXG4gICAgICAgICAgY29sb3I6ICRjb2xvci13aGl0ZTtcclxuICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICAgIHotaW5kZXg6IDI7XHJcblxyXG4gICAgICAgICAgJjo6YmVmb3JlIHtcclxuICAgICAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgdG9wOiAtMTBweDtcclxuICAgICAgICAgICAgYm90dG9tOiAtMTBweDtcclxuICAgICAgICAgICAgcmlnaHQ6IDE1MCU7XHJcbiAgICAgICAgICAgIGxlZnQ6IC0xMHB4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTBweDtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogJGdyYWRpZW50O1xyXG4gICAgICAgICAgICBhbmltYXRpb246IHVuSG92ZXJCYWNrZ3JvdW5kO1xyXG4gICAgICAgICAgICBhbmltYXRpb24tZHVyYXRpb246IDAuM3M7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XHJcbiAgICAgICAgICAgIHotaW5kZXg6IC0xO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAmOjpiZWZvcmUge1xyXG4gICAgICAgICAgICAgIGFuaW1hdGlvbjogaG92ZXJCYWNrZ3JvdW5kO1xyXG4gICAgICAgICAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4zcztcclxuICAgICAgICAgICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XHJcbiAgICAgICAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGtleWZyYW1lcyBob3ZlckJhY2tncm91bmQge1xyXG4gICAgICAgICAgZnJvbSB7XHJcbiAgICAgICAgICAgIHJpZ2h0OiAxNTAlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRvIHtcclxuICAgICAgICAgICAgcmlnaHQ6IC0xMHB4O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGtleWZyYW1lcyB1bkhvdmVyQmFja2dyb3VuZCB7XHJcbiAgICAgICAgICBmcm9tIHtcclxuICAgICAgICAgICAgcmlnaHQ6IC0xMHB4O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRvIHtcclxuICAgICAgICAgICAgcmlnaHQ6IDE1MCU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLm5hdl9fbW9iaWxlIHtcclxuICAgICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB6LWluZGV4OiAyMDA7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgd2lkdGg6IDMwcHg7XHJcbiAgICAgIGhlaWdodDogMzBweDtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xyXG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gICAgICBAaW5jbHVkZSBtZWRpYSgnPD10YWJsZXRNaWQnKSB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgICAmLmFjdGl2ZSB7XHJcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgICAgIHRvcDogMyU7XHJcbiAgICAgICAgcmlnaHQ6IDUlO1xyXG5cclxuICAgICAgICAubW9iaWxlX19idG4ge1xyXG4gICAgICAgICAgJjpudGgtb2YtdHlwZSgxKSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgJjpudGgtb2YtdHlwZSgyKSB7XHJcbiAgICAgICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwJSkgcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAmOm50aC1vZi10eXBlKDMpIHtcclxuICAgICAgICAgICAgdG9wOiA1MCU7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDAlKSByb3RhdGUoLTQ1ZGVnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5tb2JpbGVfX2Jsb2NrIHtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5tb2JpbGVfX2J0biB7XHJcbiAgICAgICAgei1pbmRleDogMTA7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICB3aWR0aDogMzBweDtcclxuICAgICAgICBoZWlnaHQ6IDJweDtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzO1xyXG5cclxuXHJcbiAgICAgICAgJjpudGgtb2YtdHlwZSgyKSB7XHJcbiAgICAgICAgICB0b3A6IGNhbGMoNTAlIC0gN3B4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICY6bnRoLW9mLXR5cGUoMykge1xyXG4gICAgICAgICAgdG9wOiBjYWxjKDUwJSArIDdweCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAubW9iaWxlX19ibG9jayB7XHJcbiAgICAgICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgICAgIHRvcDogMDtcclxuICAgICAgICByaWdodDogMDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICAgICAgb3ZlcmZsb3cteTogaGlkZGVuO1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTtcclxuICAgICAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgICAgICAgYmFja2dyb3VuZDogJGNvbG9yLWJsYWNrO1xyXG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjVzO1xyXG4gICAgICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XHJcblxyXG4gICAgICAgIC5uYXZfX2xpc3Qge1xyXG4gICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICBnYXA6IDUwcHg7XHJcbiAgICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgICAgICAgIC5pdGVtc19fbGluayB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxLjg3NXJlbTtcclxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcclxuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyogY3JpdGljYWw6ZW5kICovXHJcbi8vIEhlYWRlciBzdHlsZXMgZW5kXHJcbiIsIi8qIGNyaXRpY2FsOnN0YXJ0ICovXG4uZmlyc3RfX2Jsb2NrIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWcvbWFpbi1zY3JlZW5fX2JnYy5wbmcnKTtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcuLi9pbWcvbWFpbi1zY3JlZW5fX2JnYy53ZWJwJyk7XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XG4gIGJhY2tncm91bmQtYXR0YWNobWVudDogZml4ZWQ7XG4gIGhlaWdodDogMTAwdmg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmctdG9wOiAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMDBweDtcblxuICBAaW5jbHVkZSBtZWRpYSgnPD10YWJsZXRSZWcnKSB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuXG4gIEBpbmNsdWRlIG1lZGlhKCc8PTcwMHB4Jykge1xuICAgIG1hcmdpbi1ib3R0b206IDEwMHB4O1xuICB9XG5cbiAgLmNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxMzBweDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogY2FsYygxMDAlIC0gNTBweCk7XG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XG4gICAgQGluY2x1ZGUgY3NzLWxvY2soNSwgNzAsIDMyMCwgMTMwMCwgcGFkZGluZy1yaWdodCwgcHgpO1xuXG4gICAgQGluY2x1ZGUgbWVkaWEoJzw9dGFibGV0UmVnJykge1xuICAgICAgJiB7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBlbmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLnRpdGxlX2FuZF90aW1lciB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGdhcDogNTBweDtcblxuICAgICAgQGluY2x1ZGUgbWVkaWEoJzw9NDUwcHgnKSB7XG4gICAgICAgICYge1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC50aXRsZSB7XG4gICAgICAgIEBpbmNsdWRlIGNzcy1sb2NrKDI1LCA2NCwgMzIwLCAxMzAwLCBmb250LXNpemUsIHB4KTtcbiAgICAgICAgQGluY2x1ZGUgY3NzLWxvY2soMzAwLCA5MjAsIDMyMCwgMTMwMCwgbWF4LXdpZHRoLCBweCk7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxNDAlO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICB9XG5cbiAgICAgIC50aW1lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGdhcDogMzBweDtcbiAgICAgICAgZmxleC1ncm93OiAxO1xuXG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PTQwMHB4Jykge1xuICAgICAgICAgICYge1xuICAgICAgICAgICAgZ2FwOiAxMHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICZfX2Jsb2NrIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBnYXA6IDEwcHg7XG4gICAgICAgICAgd2lkdGg6IDEwMnB4O1xuICAgICAgICAgIGhlaWdodDogMTEycHg7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHNlY29uZC1ibGFjaztcblxuICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PTUyNHB4Jykge1xuICAgICAgICAgICAgd2lkdGg6IDcwcHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDExMnB4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PTM4OXB4Jykge1xuICAgICAgICAgICAgJiB7XG4gICAgICAgICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC5ibG9jayB7XG4gICAgICAgICAgICAmX192YWx1ZSB7XG4gICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE0MCU7XG4gICAgICAgICAgICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xuXG4gICAgICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PTM4OXB4Jykge1xuICAgICAgICAgICAgICAgICYge1xuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PTM0NXB4Jykge1xuICAgICAgICAgICAgICAgICYge1xuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICZfX3R5cGUge1xuICAgICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxNDAlO1xuICAgICAgICAgICAgICBvcGFjaXR5OiAwLjQ7XG5cbiAgICAgICAgICAgICAgQGluY2x1ZGUgbWVkaWEoJzw9Mzg5cHgnKSB7XG4gICAgICAgICAgICAgICAgJiB7XG4gICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgQGluY2x1ZGUgbWVkaWEoJzw9MzQ1cHgnKSB7XG4gICAgICAgICAgICAgICAgJiB7XG4gICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm9yZGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGhlaWdodDogbWF4LWNvbnRlbnQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHNlY29uZC1ibGFjaztcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGdhcDogMjBweCA4MXB4O1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBwYWRkaW5nOiAyMHB4O1xuXG4gICAgQGluY2x1ZGUgbWVkaWEoJzw9MTEyOXB4Jykge1xuICAgICAgcGFkZGluZzogNTBweDtcbiAgICB9XG5cbiAgICAmX19idXR0b24ge1xuICAgICAgQGluY2x1ZGUgbWVkaWEoJzw9NjA4cHgnKSB7XG4gICAgICAgIG9yZGVyOiAzO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX2NvdW50IHtcbiAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PTYwOHB4Jykge1xuICAgICAgICBvcmRlcjogMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuY291bnQge1xuICAgICAgJl9fdGV4dCB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE1MCU7XG4gICAgICAgIG9wYWNpdHk6IDAuNDtcbiAgICAgICAgcGFkZGluZy1yaWdodDogMzBweDtcbiAgICAgIH1cblxuICAgICAgJl9fdmFsdWUge1xuICAgICAgICBmb250LXdlaWdodDogNzAwO1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxNTAlO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX21vbmV5IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgZ2FwOiA4cHg7XG5cbiAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PTYwOHB4Jykge1xuICAgICAgICBvcmRlcjogMjtcbiAgICAgIH1cblxuICAgICAgLnRleHQge1xuICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICBmb250LXNpemU6IDE2cHg7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxNTAlO1xuICAgICAgICBvcGFjaXR5OiAwLjQ7XG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDMwcHg7XG4gICAgICB9XG5cbiAgICAgIC5jb3VudCB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE1MCU7XG4gICAgICB9XG5cbiAgICAgIC5wcm9ncmVzcy1iYXIge1xuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci13aGl0ZTtcbiAgICAgICAgd2lkdGg6IDc1MHB4O1xuICAgICAgICBoZWlnaHQ6IDZweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICAgICAgIEBpbmNsdWRlIG1lZGlhKCc8PWRlc2t0b3BNaWQnKSB7XG4gICAgICAgICAgJiB7XG4gICAgICAgICAgICB3aWR0aDogNTAwcHg7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgQGluY2x1ZGUgbWVkaWEoJzw9NjA4cHgnKSB7XG4gICAgICAgICAgJiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgY29udGVudDogJzAnO1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB0b3A6IDExcHg7XG4gICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICBvcGFjaXR5OiAwLjQ7XG4gICAgICAgIH1cblxuICAgICAgICAmOjphZnRlciB7XG4gICAgICAgICAgY29udGVudDogJzEgMDAwIDAwMOKCvSc7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHRvcDogMTFweDtcbiAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICBvcGFjaXR5OiAwLjQ7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICAucHJvZ3Jlc3MtYmFyPnNwYW4ge1xuICAgICAgICB3aWR0aDogNjAlO1xuICAgICAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gICAgICAgIGJhY2tncm91bmQ6ICRncmFkaWVudDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMnB4O1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgdGV4dC1pbmRlbnQ6IC05OTk5cHg7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qIGNyaXRpY2FsOmVuZCAqL1xuIiwiQGNoYXJzZXQgXCJVVEYtOFwiO1xyXG5cclxuLy8gICAgIF8gICAgICAgICAgICBfICAgICAgICAgICBfICAgICAgICAgICAgICAgICAgICAgICAgICAgXyBfXHJcbi8vICAgIChfKSAgICAgICAgICB8IHwgICAgICAgICB8IHwgICAgICAgICAgICAgICAgICAgICAgICAgfCAoXylcclxuLy8gICAgIF8gXyBfXyAgIF9fX3wgfF8gICBfICBfX3wgfCBfX18gICBfIF9fIF9fXyAgIF9fXyAgX198IHxfICBfXyBfXHJcbi8vICAgIHwgfCAnXyBcXCAvIF9ffCB8IHwgfCB8LyBfYCB8LyBfIFxcIHwgJ18gYCBfIFxcIC8gXyBcXC8gX2AgfCB8LyBfYCB8XHJcbi8vICAgIHwgfCB8IHwgfCAoX198IHwgfF98IHwgKF98IHwgIF9fLyB8IHwgfCB8IHwgfCAgX18vIChffCB8IHwgKF98IHxcclxuLy8gICAgfF98X3wgfF98XFxfX198X3xcXF9fLF98XFxfXyxffFxcX19ffCB8X3wgfF98IHxffFxcX19ffFxcX18sX3xffFxcX18sX3xcclxuLy9cclxuLy8gICAgICBTaW1wbGUsIGVsZWdhbnQgYW5kIG1haW50YWluYWJsZSBtZWRpYSBxdWVyaWVzIGluIFNhc3NcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICB2MS40LjlcclxuLy9cclxuLy8gICAgICAgICAgICAgICAgaHR0cDovL2luY2x1ZGUtbWVkaWEuY29tXHJcbi8vXHJcbi8vICAgICAgICAgQXV0aG9yczogRWR1YXJkbyBCb3VjYXMgKEBlZHVhcmRvYm91Y2FzKVxyXG4vLyAgICAgICAgICAgICAgICAgIEh1Z28gR2lyYXVkZWwgKEBodWdvZ2lyYXVkZWwpXHJcbi8vXHJcbi8vICAgICAgVGhpcyBwcm9qZWN0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2VcclxuXHJcbi8vLy9cclxuLy8vIGluY2x1ZGUtbWVkaWEgbGlicmFyeSBwdWJsaWMgY29uZmlndXJhdGlvblxyXG4vLy8gQGF1dGhvciBFZHVhcmRvIEJvdWNhc1xyXG4vLy8gQGFjY2VzcyBwdWJsaWNcclxuLy8vL1xyXG5cclxuLy8vXHJcbi8vLyBDcmVhdGVzIGEgbGlzdCBvZiBnbG9iYWwgYnJlYWtwb2ludHNcclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gQ3JlYXRlcyBhIHNpbmdsZSBicmVha3BvaW50IHdpdGggdGhlIGxhYmVsIGBwaG9uZWBcclxuLy8vICAkYnJlYWtwb2ludHM6ICgncGhvbmUnOiAzMjBweCk7XHJcbi8vL1xyXG4kYnJlYWtwb2ludHM6IChcclxuICAncGhvbmUnOiAzMjBweCxcclxuICAndGFibGV0JzogNzY4cHgsXHJcbiAgJ2Rlc2t0b3AnOiAxMDI0cHgsXHJcbikgIWRlZmF1bHQ7XHJcblxyXG4vLy9cclxuLy8vIENyZWF0ZXMgYSBsaXN0IG9mIHN0YXRpYyBleHByZXNzaW9ucyBvciBtZWRpYSB0eXBlc1xyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc2luZ2xlIG1lZGlhIHR5cGUgKHNjcmVlbilcclxuLy8vICAkbWVkaWEtZXhwcmVzc2lvbnM6ICgnc2NyZWVuJzogJ3NjcmVlbicpO1xyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBDcmVhdGVzIGEgc3RhdGljIGV4cHJlc3Npb24gd2l0aCBsb2dpY2FsIGRpc2p1bmN0aW9uIChPUiBvcGVyYXRvcilcclxuLy8vICAkbWVkaWEtZXhwcmVzc2lvbnM6IChcclxuLy8vICAgICdyZXRpbmEyeCc6ICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpJ1xyXG4vLy8gICk7XHJcbi8vL1xyXG4kbWVkaWEtZXhwcmVzc2lvbnM6IChcclxuICAnc2NyZWVuJzogJ3NjcmVlbicsXHJcbiAgJ3ByaW50JzogJ3ByaW50JyxcclxuICAnaGFuZGhlbGQnOiAnaGFuZGhlbGQnLFxyXG4gICdsYW5kc2NhcGUnOiAnKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcclxuICAncG9ydHJhaXQnOiAnKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxyXG4gICdyZXRpbmEyeCc6XHJcbiAgICAnKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwgKG1pbi1yZXNvbHV0aW9uOiAyZHBweCknLFxyXG4gICdyZXRpbmEzeCc6XHJcbiAgICAnKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMyksIChtaW4tcmVzb2x1dGlvbjogMzUwZHBpKSwgKG1pbi1yZXNvbHV0aW9uOiAzZHBweCknLFxyXG4pICFkZWZhdWx0O1xyXG5cclxuLy8vXHJcbi8vLyBEZWZpbmVzIGEgbnVtYmVyIHRvIGJlIGFkZGVkIG9yIHN1YnRyYWN0ZWQgZnJvbSBlYWNoIHVuaXQgd2hlbiBkZWNsYXJpbmcgYnJlYWtwb2ludHMgd2l0aCBleGNsdXNpdmUgaW50ZXJ2YWxzXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciBwaXhlbHMgaXMgZGVmaW5lZCBhcyBgMWAgYnkgZGVmYXVsdFxyXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+MTI4cHgnKSB7fVxyXG4vLy9cclxuLy8vICAvKiBHZW5lcmF0ZXM6ICovXHJcbi8vLyAgQG1lZGlhIChtaW4td2lkdGg6IDEyOXB4KSB7fVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBJbnRlcnZhbCBmb3IgZW1zIGlzIGRlZmluZWQgYXMgYDAuMDFgIGJ5IGRlZmF1bHRcclxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPjIwZW0nKSB7fVxyXG4vLy9cclxuLy8vICAvKiBHZW5lcmF0ZXM6ICovXHJcbi8vLyAgQG1lZGlhIChtaW4td2lkdGg6IDIwLjAxZW0pIHt9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEludGVydmFsIGZvciByZW1zIGlzIGRlZmluZWQgYXMgYDAuMWAgYnkgZGVmYXVsdCwgdG8gYmUgdXNlZCB3aXRoIGBmb250LXNpemU6IDYyLjUlO2BcclxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPjIuMHJlbScpIHt9XHJcbi8vL1xyXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cclxuLy8vICBAbWVkaWEgKG1pbi13aWR0aDogMi4xcmVtKSB7fVxyXG4vLy9cclxuJHVuaXQtaW50ZXJ2YWxzOiAoXHJcbiAgJ3B4JzogMSxcclxuICAnZW0nOiAwLjAxLFxyXG4gICdyZW0nOiAwLjEsXHJcbiAgJyc6IDAsXHJcbikgIWRlZmF1bHQ7XHJcblxyXG4vLy9cclxuLy8vIERlZmluZXMgd2hldGhlciBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGlzIGF2YWlsYWJsZSwgdXNlZnVsIGZvciBjcmVhdGluZyBzZXBhcmF0ZSBzdHlsZXNoZWV0c1xyXG4vLy8gZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBtZWRpYSBxdWVyaWVzLlxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBEaXNhYmxlcyBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzXHJcbi8vLyAgJGltLW1lZGlhLXN1cHBvcnQ6IGZhbHNlO1xyXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PXRhYmxldCcpIHtcclxuLy8vICAgIC5mb28ge1xyXG4vLy8gICAgICBjb2xvcjogdG9tYXRvO1xyXG4vLy8gICAgfVxyXG4vLy8gIH1cclxuLy8vXHJcbi8vLyAgLyogR2VuZXJhdGVzOiAqL1xyXG4vLy8gIC5mb28ge1xyXG4vLy8gICAgY29sb3I6IHRvbWF0bztcclxuLy8vICB9XHJcbi8vL1xyXG4kaW0tbWVkaWEtc3VwcG9ydDogdHJ1ZSAhZGVmYXVsdDtcclxuXHJcbi8vL1xyXG4vLy8gU2VsZWN0cyB3aGljaCBicmVha3BvaW50IHRvIGVtdWxhdGUgd2hlbiBzdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGlzIGRpc2FibGVkLiBNZWRpYSBxdWVyaWVzIHRoYXQgc3RhcnQgYXQgb3JcclxuLy8vIGludGVyY2VwdCB0aGUgYnJlYWtwb2ludCB3aWxsIGJlIGRpc3BsYXllZCwgYW55IG90aGVycyB3aWxsIGJlIGlnbm9yZWQuXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFRoaXMgbWVkaWEgcXVlcnkgd2lsbCBzaG93IGJlY2F1c2UgaXQgaW50ZXJjZXB0cyB0aGUgc3RhdGljIGJyZWFrcG9pbnRcclxuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XHJcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJztcclxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj10YWJsZXQnKSB7XHJcbi8vLyAgICAuZm9vIHtcclxuLy8vICAgICAgY29sb3I6IHRvbWF0bztcclxuLy8vICAgIH1cclxuLy8vICB9XHJcbi8vL1xyXG4vLy8gIC8qIEdlbmVyYXRlczogKi9cclxuLy8vICAuZm9vIHtcclxuLy8vICAgIGNvbG9yOiB0b21hdG87XHJcbi8vLyAgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBUaGlzIG1lZGlhIHF1ZXJ5IHdpbGwgTk9UIHNob3cgYmVjYXVzZSBpdCBkb2VzIG5vdCBpbnRlcmNlcHQgdGhlIGRlc2t0b3AgYnJlYWtwb2ludFxyXG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcclxuLy8vICAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ3RhYmxldCc7XHJcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49ZGVza3RvcCcpIHtcclxuLy8vICAgIC5mb28ge1xyXG4vLy8gICAgICBjb2xvcjogdG9tYXRvO1xyXG4vLy8gICAgfVxyXG4vLy8gIH1cclxuLy8vXHJcbi8vLyAgLyogTm8gb3V0cHV0ICovXHJcbi8vL1xyXG4kaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ2Rlc2t0b3AnICFkZWZhdWx0O1xyXG5cclxuLy8vXHJcbi8vLyBTZWxlY3RzIHdoaWNoIG1lZGlhIGV4cHJlc3Npb25zIGFyZSBhbGxvd2VkIGluIGFuIGV4cHJlc3Npb24gZm9yIGl0IHRvIGJlIHVzZWQgd2hlbiBtZWRpYSBxdWVyaWVzXHJcbi8vLyBhcmUgbm90IHN1cHBvcnRlZC5cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gVGhpcyBtZWRpYSBxdWVyeSB3aWxsIHNob3cgYmVjYXVzZSBpdCBpbnRlcmNlcHRzIHRoZSBzdGF0aWMgYnJlYWtwb2ludCBhbmQgY29udGFpbnMgb25seSBhY2NlcHRlZCBtZWRpYSBleHByZXNzaW9uc1xyXG4vLy8gICRpbS1tZWRpYS1zdXBwb3J0OiBmYWxzZTtcclxuLy8vICAkaW0tbm8tbWVkaWEtYnJlYWtwb2ludDogJ2Rlc2t0b3AnO1xyXG4vLy8gICRpbS1uby1tZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nKTtcclxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPj10YWJsZXQnLCAnc2NyZWVuJykge1xyXG4vLy8gICAgLmZvbyB7XHJcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XHJcbi8vLyAgICB9XHJcbi8vLyAgfVxyXG4vLy9cclxuLy8vICAgLyogR2VuZXJhdGVzOiAqL1xyXG4vLy8gICAuZm9vIHtcclxuLy8vICAgICBjb2xvcjogdG9tYXRvO1xyXG4vLy8gICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFRoaXMgbWVkaWEgcXVlcnkgd2lsbCBOT1Qgc2hvdyBiZWNhdXNlIGl0IGludGVyY2VwdHMgdGhlIHN0YXRpYyBicmVha3BvaW50IGJ1dCBjb250YWlucyBhIG1lZGlhIGV4cHJlc3Npb24gdGhhdCBpcyBub3QgYWNjZXB0ZWRcclxuLy8vICAkaW0tbWVkaWEtc3VwcG9ydDogZmFsc2U7XHJcbi8vLyAgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQ6ICdkZXNrdG9wJztcclxuLy8vICAkaW0tbm8tbWVkaWEtZXhwcmVzc2lvbnM6ICgnc2NyZWVuJyk7XHJcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49dGFibGV0JywgJ3JldGluYTJ4Jykge1xyXG4vLy8gICAgLmZvbyB7XHJcbi8vLyAgICAgIGNvbG9yOiB0b21hdG87XHJcbi8vLyAgICB9XHJcbi8vLyAgfVxyXG4vLy9cclxuLy8vICAvKiBObyBvdXRwdXQgKi9cclxuLy8vXHJcbiRpbS1uby1tZWRpYS1leHByZXNzaW9uczogKCdzY3JlZW4nLCAncG9ydHJhaXQnLCAnbGFuZHNjYXBlJykgIWRlZmF1bHQ7XHJcblxyXG4vLy8vXHJcbi8vLyBDcm9zcy1lbmdpbmUgbG9nZ2luZyBlbmdpbmVcclxuLy8vIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLy9cclxuXHJcbi8vL1xyXG4vLy8gTG9nIGEgbWVzc2FnZSBlaXRoZXIgd2l0aCBgQGVycm9yYCBpZiBzdXBwb3J0ZWRcclxuLy8vIGVsc2Ugd2l0aCBgQHdhcm5gLCB1c2luZyBgZmVhdHVyZS1leGlzdHMoJ2F0LWVycm9yJylgXHJcbi8vLyB0byBkZXRlY3Qgc3VwcG9ydC5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJG1lc3NhZ2UgLSBNZXNzYWdlIHRvIGxvZ1xyXG4vLy9cclxuQGZ1bmN0aW9uIGltLWxvZygkbWVzc2FnZSkge1xyXG4gIEBpZiBmZWF0dXJlLWV4aXN0cygnYXQtZXJyb3InKSB7XHJcbiAgICBAZXJyb3IgJG1lc3NhZ2U7XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAd2FybiAkbWVzc2FnZTtcclxuICAgICRfOiBub29wKCk7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRtZXNzYWdlO1xyXG59XHJcblxyXG4vLy9cclxuLy8vIFdyYXBwZXIgbWl4aW4gZm9yIHRoZSBsb2cgZnVuY3Rpb24gc28gaXQgY2FuIGJlIHVzZWQgd2l0aCBhIG1vcmUgZnJpZW5kbHlcclxuLy8vIEFQSSB0aGFuIGBAaWYgaW0tbG9nKCcuLicpIHt9YCBvciBgJF86IGltLWxvZygnLi4nKWAuIEJhc2ljYWxseSwgdXNlIHRoZSBmdW5jdGlvblxyXG4vLy8gd2l0aGluIGZ1bmN0aW9ucyBiZWNhdXNlIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbmNsdWRlIGEgbWl4aW4gaW4gYSBmdW5jdGlvblxyXG4vLy8gYW5kIHVzZSB0aGUgbWl4aW4gZXZlcnl3aGVyZSBlbHNlIGJlY2F1c2UgaXQncyBtdWNoIG1vcmUgZWxlZ2FudC5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJG1lc3NhZ2UgLSBNZXNzYWdlIHRvIGxvZ1xyXG4vLy9cclxuQG1peGluIGxvZygkbWVzc2FnZSkge1xyXG4gIEBpZiBpbS1sb2coJG1lc3NhZ2UpIHtcclxuICB9XHJcbn1cclxuXHJcbi8vL1xyXG4vLy8gRnVuY3Rpb24gd2l0aCBubyBgQHJldHVybmAgY2FsbGVkIG5leHQgdG8gYEB3YXJuYCBpbiBTYXNzIDMuM1xyXG4vLy8gdG8gdHJpZ2dlciBhIGNvbXBpbGluZyBlcnJvciBhbmQgc3RvcCB0aGUgcHJvY2Vzcy5cclxuLy8vXHJcbkBmdW5jdGlvbiBub29wKCkge1xyXG59XHJcblxyXG4vLy9cclxuLy8vIERldGVybWluZXMgd2hldGhlciBhIGxpc3Qgb2YgY29uZGl0aW9ucyBpcyBpbnRlcmNlcHRlZCBieSB0aGUgc3RhdGljIGJyZWFrcG9pbnQuXHJcbi8vL1xyXG4vLy8gQHBhcmFtIHtBcmdsaXN0fSAgICRjb25kaXRpb25zICAtIE1lZGlhIHF1ZXJ5IGNvbmRpdGlvbnNcclxuLy8vXHJcbi8vLyBAcmV0dXJuIHtCb29sZWFufSAtIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29uZGl0aW9ucyBhcmUgaW50ZXJjZXB0ZWQgYnkgdGhlIHN0YXRpYyBicmVha3BvaW50XHJcbi8vL1xyXG5AZnVuY3Rpb24gaW0taW50ZXJjZXB0cy1zdGF0aWMtYnJlYWtwb2ludCgkY29uZGl0aW9ucy4uLikge1xyXG4gICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlOiBtYXAtZ2V0KCRicmVha3BvaW50cywgJGltLW5vLW1lZGlhLWJyZWFrcG9pbnQpO1xyXG5cclxuICBAaWYgbm90ICRuby1tZWRpYS1icmVha3BvaW50LXZhbHVlIHtcclxuICAgIEBpZiBpbS1sb2coJ2AjeyRpbS1uby1tZWRpYS1icmVha3BvaW50fWAgaXMgbm90IGEgdmFsaWQgYnJlYWtwb2ludC4nKSB7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAZWFjaCAkY29uZGl0aW9uIGluICRjb25kaXRpb25zIHtcclxuICAgIEBpZiBub3QgbWFwLWhhcy1rZXkoJG1lZGlhLWV4cHJlc3Npb25zLCAkY29uZGl0aW9uKSB7XHJcbiAgICAgICRvcGVyYXRvcjogZ2V0LWV4cHJlc3Npb24tb3BlcmF0b3IoJGNvbmRpdGlvbik7XHJcbiAgICAgICRwcmVmaXg6IGdldC1leHByZXNzaW9uLXByZWZpeCgkb3BlcmF0b3IpO1xyXG4gICAgICAkdmFsdWU6IGdldC1leHByZXNzaW9uLXZhbHVlKCRjb25kaXRpb24sICRvcGVyYXRvcik7XHJcblxyXG4gICAgICBAaWYgKCRwcmVmaXggPT0gJ21heCcgYW5kICR2YWx1ZSA8PSAkbm8tbWVkaWEtYnJlYWtwb2ludC12YWx1ZSkgb3JcclxuICAgICAgICAoJHByZWZpeCA9PSAnbWluJyBhbmQgJHZhbHVlID4gJG5vLW1lZGlhLWJyZWFrcG9pbnQtdmFsdWUpXHJcbiAgICAgIHtcclxuICAgICAgICBAcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9IEBlbHNlIGlmIG5vdCBpbmRleCgkaW0tbm8tbWVkaWEtZXhwcmVzc2lvbnMsICRjb25kaXRpb24pIHtcclxuICAgICAgQHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuLy8vL1xyXG4vLy8gUGFyc2luZyBlbmdpbmVcclxuLy8vIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxyXG4vLy8gQGFjY2VzcyBwcml2YXRlXHJcbi8vLy9cclxuXHJcbi8vL1xyXG4vLy8gR2V0IG9wZXJhdG9yIG9mIGFuIGV4cHJlc3Npb25cclxuLy8vXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJGV4cHJlc3Npb24gLSBFeHByZXNzaW9uIHRvIGV4dHJhY3Qgb3BlcmF0b3IgZnJvbVxyXG4vLy9cclxuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBBbnkgb2YgYD49YCwgYD5gLCBgPD1gLCBgPGAsIGDiiaVgLCBg4omkYFxyXG4vLy9cclxuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLW9wZXJhdG9yKCRleHByZXNzaW9uKSB7XHJcbiAgQGVhY2ggJG9wZXJhdG9yIGluICgnPj0nLCAnPicsICc8PScsICc8JywgJ+KJpScsICfiiaQnKSB7XHJcbiAgICBAaWYgc3RyLWluZGV4KCRleHByZXNzaW9uLCAkb3BlcmF0b3IpIHtcclxuICAgICAgQHJldHVybiAkb3BlcmF0b3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJdCBpcyBub3QgcG9zc2libGUgdG8gaW5jbHVkZSBhIG1peGluIGluc2lkZSBhIGZ1bmN0aW9uLCBzbyB3ZSBoYXZlIHRvXHJcbiAgLy8gcmVseSBvbiB0aGUgYGltLWxvZyguLilgIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHRoZSBgbG9nKC4uKWAgbWl4aW4uIEJlY2F1c2VcclxuICAvLyBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhbnl3aGVyZSBpbiBTYXNzLCB3ZSBuZWVkIHRvIGhhY2sgdGhlIGNhbGwgaW5cclxuICAvLyBhIGR1bW15IHZhcmlhYmxlLCBzdWNoIGFzIGAkX2AuIElmIGFueWJvZHkgZXZlciByYWlzZSBhIHNjb3BpbmcgaXNzdWUgd2l0aFxyXG4gIC8vIFNhc3MgMy4zLCBjaGFuZ2UgdGhpcyBsaW5lIGluIGBAaWYgaW0tbG9nKC4uKSB7fWAgaW5zdGVhZC5cclxuICAkXzogaW0tbG9nKCdObyBvcGVyYXRvciBmb3VuZCBpbiBgI3skZXhwcmVzc2lvbn1gLicpO1xyXG59XHJcblxyXG4vLy9cclxuLy8vIEdldCBkaW1lbnNpb24gb2YgYW4gZXhwcmVzc2lvbiwgYmFzZWQgb24gYSBmb3VuZCBvcGVyYXRvclxyXG4vLy9cclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZXhwcmVzc2lvbiAtIEV4cHJlc3Npb24gdG8gZXh0cmFjdCBkaW1lbnNpb24gZnJvbVxyXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRvcGVyYXRvciAtIE9wZXJhdG9yIGZyb20gYCRleHByZXNzaW9uYFxyXG4vLy9cclxuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBgd2lkdGhgIG9yIGBoZWlnaHRgIChvciBwb3RlbnRpYWxseSBhbnl0aGluZyBlbHNlKVxyXG4vLy9cclxuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLWRpbWVuc2lvbigkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKSB7XHJcbiAgJG9wZXJhdG9yLWluZGV4OiBzdHItaW5kZXgoJGV4cHJlc3Npb24sICRvcGVyYXRvcik7XHJcbiAgJHBhcnNlZC1kaW1lbnNpb246IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgMCwgJG9wZXJhdG9yLWluZGV4IC0gMSk7XHJcbiAgJGRpbWVuc2lvbjogJ3dpZHRoJztcclxuXHJcbiAgQGlmIHN0ci1sZW5ndGgoJHBhcnNlZC1kaW1lbnNpb24pID4gMCB7XHJcbiAgICAkZGltZW5zaW9uOiAkcGFyc2VkLWRpbWVuc2lvbjtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJGRpbWVuc2lvbjtcclxufVxyXG5cclxuLy8vXHJcbi8vLyBHZXQgZGltZW5zaW9uIHByZWZpeCBiYXNlZCBvbiBhbiBvcGVyYXRvclxyXG4vLy9cclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkb3BlcmF0b3IgLSBPcGVyYXRvclxyXG4vLy9cclxuLy8vIEByZXR1cm4ge1N0cmluZ30gLSBgbWluYCBvciBgbWF4YFxyXG4vLy9cclxuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLXByZWZpeCgkb3BlcmF0b3IpIHtcclxuICBAcmV0dXJuIGlmKGluZGV4KCgnPCcsICc8PScsICfiiaQnKSwgJG9wZXJhdG9yKSwgJ21heCcsICdtaW4nKTtcclxufVxyXG5cclxuLy8vXHJcbi8vLyBHZXQgdmFsdWUgb2YgYW4gZXhwcmVzc2lvbiwgYmFzZWQgb24gYSBmb3VuZCBvcGVyYXRvclxyXG4vLy9cclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZXhwcmVzc2lvbiAtIEV4cHJlc3Npb24gdG8gZXh0cmFjdCB2YWx1ZSBmcm9tXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJG9wZXJhdG9yIC0gT3BlcmF0b3IgZnJvbSBgJGV4cHJlc3Npb25gXHJcbi8vL1xyXG4vLy8gQHJldHVybiB7TnVtYmVyfSAtIEEgbnVtZXJpYyB2YWx1ZVxyXG4vLy9cclxuQGZ1bmN0aW9uIGdldC1leHByZXNzaW9uLXZhbHVlKCRleHByZXNzaW9uLCAkb3BlcmF0b3IpIHtcclxuICAkb3BlcmF0b3ItaW5kZXg6IHN0ci1pbmRleCgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcclxuICAkdmFsdWU6IHN0ci1zbGljZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yLWluZGV4ICsgc3RyLWxlbmd0aCgkb3BlcmF0b3IpKTtcclxuXHJcbiAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJHZhbHVlKSB7XHJcbiAgICAkdmFsdWU6IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkdmFsdWUpO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgJHZhbHVlOiB0by1udW1iZXIoJHZhbHVlKTtcclxuICB9XHJcblxyXG4gICRpbnRlcnZhbDogbWFwLWdldCgkdW5pdC1pbnRlcnZhbHMsIHVuaXQoJHZhbHVlKSk7XHJcblxyXG4gIEBpZiBub3QgJGludGVydmFsIHtcclxuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbmNsdWRlIGEgbWl4aW4gaW5zaWRlIGEgZnVuY3Rpb24sIHNvIHdlIGhhdmUgdG9cclxuICAgIC8vIHJlbHkgb24gdGhlIGBpbS1sb2coLi4pYCBmdW5jdGlvbiByYXRoZXIgdGhhbiB0aGUgYGxvZyguLilgIG1peGluLiBCZWNhdXNlXHJcbiAgICAvLyBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhbnl3aGVyZSBpbiBTYXNzLCB3ZSBuZWVkIHRvIGhhY2sgdGhlIGNhbGwgaW5cclxuICAgIC8vIGEgZHVtbXkgdmFyaWFibGUsIHN1Y2ggYXMgYCRfYC4gSWYgYW55Ym9keSBldmVyIHJhaXNlIGEgc2NvcGluZyBpc3N1ZSB3aXRoXHJcbiAgICAvLyBTYXNzIDMuMywgY2hhbmdlIHRoaXMgbGluZSBpbiBgQGlmIGltLWxvZyguLikge31gIGluc3RlYWQuXHJcbiAgICAkXzogaW0tbG9nKCdVbmtub3duIHVuaXQgYCN7dW5pdCgkdmFsdWUpfWAuJyk7XHJcbiAgfVxyXG5cclxuICBAaWYgJG9wZXJhdG9yID09ICc+JyB7XHJcbiAgICAkdmFsdWU6ICR2YWx1ZSArICRpbnRlcnZhbDtcclxuICB9IEBlbHNlIGlmICRvcGVyYXRvciA9PSAnPCcge1xyXG4gICAgJHZhbHVlOiAkdmFsdWUgLSAkaW50ZXJ2YWw7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICR2YWx1ZTtcclxufVxyXG5cclxuLy8vXHJcbi8vLyBQYXJzZSBhbiBleHByZXNzaW9uIHRvIHJldHVybiBhIHZhbGlkIG1lZGlhLXF1ZXJ5IGV4cHJlc3Npb25cclxuLy8vXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJGV4cHJlc3Npb24gLSBFeHByZXNzaW9uIHRvIHBhcnNlXHJcbi8vL1xyXG4vLy8gQHJldHVybiB7U3RyaW5nfSAtIFZhbGlkIG1lZGlhIHF1ZXJ5XHJcbi8vL1xyXG5AZnVuY3Rpb24gcGFyc2UtZXhwcmVzc2lvbigkZXhwcmVzc2lvbikge1xyXG4gIC8vIElmIGl0IGlzIHBhcnQgb2YgJG1lZGlhLWV4cHJlc3Npb25zLCBpdCBoYXMgbm8gb3BlcmF0b3JcclxuICAvLyB0aGVuIHRoZXJlIGlzIG5vIG5lZWQgdG8gZ28gYW55IGZ1cnRoZXIsIGp1c3QgcmV0dXJuIHRoZSB2YWx1ZVxyXG4gIEBpZiBtYXAtaGFzLWtleSgkbWVkaWEtZXhwcmVzc2lvbnMsICRleHByZXNzaW9uKSB7XHJcbiAgICBAcmV0dXJuIG1hcC1nZXQoJG1lZGlhLWV4cHJlc3Npb25zLCAkZXhwcmVzc2lvbik7XHJcbiAgfVxyXG5cclxuICAkb3BlcmF0b3I6IGdldC1leHByZXNzaW9uLW9wZXJhdG9yKCRleHByZXNzaW9uKTtcclxuICAkZGltZW5zaW9uOiBnZXQtZXhwcmVzc2lvbi1kaW1lbnNpb24oJGV4cHJlc3Npb24sICRvcGVyYXRvcik7XHJcbiAgJHByZWZpeDogZ2V0LWV4cHJlc3Npb24tcHJlZml4KCRvcGVyYXRvcik7XHJcbiAgJHZhbHVlOiBnZXQtZXhwcmVzc2lvbi12YWx1ZSgkZXhwcmVzc2lvbiwgJG9wZXJhdG9yKTtcclxuXHJcbiAgQHJldHVybiAnKCN7JHByZWZpeH0tI3skZGltZW5zaW9ufTogI3skdmFsdWV9KSc7XHJcbn1cclxuXHJcbi8vL1xyXG4vLy8gU2xpY2UgYCRsaXN0YCBiZXR3ZWVuIGAkc3RhcnRgIGFuZCBgJGVuZGAgaW5kZXhlc1xyXG4vLy9cclxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxyXG4vLy9cclxuLy8vIEBwYXJhbSB7TGlzdH0gJGxpc3QgLSBMaXN0IHRvIHNsaWNlXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJHN0YXJ0IFsxXSAtIFN0YXJ0IGluZGV4XHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJGVuZCBbbGVuZ3RoKCRsaXN0KV0gLSBFbmQgaW5kZXhcclxuLy8vXHJcbi8vLyBAcmV0dXJuIHtMaXN0fSBTbGljZWQgbGlzdFxyXG4vLy9cclxuQGZ1bmN0aW9uIHNsaWNlKCRsaXN0LCAkc3RhcnQ6IDEsICRlbmQ6IGxlbmd0aCgkbGlzdCkpIHtcclxuICBAaWYgbGVuZ3RoKCRsaXN0KSA8IDEgb3IgJHN0YXJ0ID4gJGVuZCB7XHJcbiAgICBAcmV0dXJuICgpO1xyXG4gIH1cclxuXHJcbiAgJHJlc3VsdDogKCk7XHJcblxyXG4gIEBmb3IgJGkgZnJvbSAkc3RhcnQgdGhyb3VnaCAkZW5kIHtcclxuICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCBudGgoJGxpc3QsICRpKSk7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRyZXN1bHQ7XHJcbn1cclxuXHJcbi8vLy9cclxuLy8vIFN0cmluZyB0byBudW1iZXIgY29udmVydGVyXHJcbi8vLyBAYXV0aG9yIEh1Z28gR2lyYXVkZWxcclxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxyXG4vLy8vXHJcblxyXG4vLy9cclxuLy8vIENhc3RzIGEgc3RyaW5nIGludG8gYSBudW1iZXJcclxuLy8vXHJcbi8vLyBAcGFyYW0ge1N0cmluZyB8IE51bWJlcn0gJHZhbHVlIC0gVmFsdWUgdG8gYmUgcGFyc2VkXHJcbi8vL1xyXG4vLy8gQHJldHVybiB7TnVtYmVyfVxyXG4vLy9cclxuQGZ1bmN0aW9uIHRvLW51bWJlcigkdmFsdWUpIHtcclxuICBAaWYgdHlwZS1vZigkdmFsdWUpID09ICdudW1iZXInIHtcclxuICAgIEByZXR1cm4gJHZhbHVlO1xyXG4gIH0gQGVsc2UgaWYgdHlwZS1vZigkdmFsdWUpICE9ICdzdHJpbmcnIHtcclxuICAgICRfOiBpbS1sb2coJ1ZhbHVlIGZvciBgdG8tbnVtYmVyYCBzaG91bGQgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XHJcbiAgfVxyXG5cclxuICAkZmlyc3QtY2hhcmFjdGVyOiBzdHItc2xpY2UoJHZhbHVlLCAxLCAxKTtcclxuICAkcmVzdWx0OiAwO1xyXG4gICRkaWdpdHM6IDA7XHJcbiAgJG1pbnVzOiAoJGZpcnN0LWNoYXJhY3RlciA9PSAnLScpO1xyXG4gICRudW1iZXJzOiAoXHJcbiAgICAnMCc6IDAsXHJcbiAgICAnMSc6IDEsXHJcbiAgICAnMic6IDIsXHJcbiAgICAnMyc6IDMsXHJcbiAgICAnNCc6IDQsXHJcbiAgICAnNSc6IDUsXHJcbiAgICAnNic6IDYsXHJcbiAgICAnNyc6IDcsXHJcbiAgICAnOCc6IDgsXHJcbiAgICAnOSc6IDksXHJcbiAgKTtcclxuXHJcbiAgLy8gUmVtb3ZlICsvLSBzaWduIGlmIHByZXNlbnQgYXQgZmlyc3QgY2hhcmFjdGVyXHJcbiAgQGlmICgkZmlyc3QtY2hhcmFjdGVyID09ICcrJyBvciAkZmlyc3QtY2hhcmFjdGVyID09ICctJykge1xyXG4gICAgJHZhbHVlOiBzdHItc2xpY2UoJHZhbHVlLCAyKTtcclxuICB9XHJcblxyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggc3RyLWxlbmd0aCgkdmFsdWUpIHtcclxuICAgICRjaGFyYWN0ZXI6IHN0ci1zbGljZSgkdmFsdWUsICRpLCAkaSk7XHJcblxyXG4gICAgQGlmIG5vdChpbmRleChtYXAta2V5cygkbnVtYmVycyksICRjaGFyYWN0ZXIpIG9yICRjaGFyYWN0ZXIgPT0gJy4nKSB7XHJcbiAgICAgIEByZXR1cm4gdG8tbGVuZ3RoKGlmKCRtaW51cywgLSRyZXN1bHQsICRyZXN1bHQpLCBzdHItc2xpY2UoJHZhbHVlLCAkaSkpO1xyXG4gICAgfVxyXG5cclxuICAgIEBpZiAkY2hhcmFjdGVyID09ICcuJyB7XHJcbiAgICAgICRkaWdpdHM6IDE7XHJcbiAgICB9IEBlbHNlIGlmICRkaWdpdHMgPT0gMCB7XHJcbiAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKiAxMCArIG1hcC1nZXQoJG51bWJlcnMsICRjaGFyYWN0ZXIpO1xyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgICRkaWdpdHM6ICRkaWdpdHMgKiAxMDtcclxuICAgICAgJHJlc3VsdDogJHJlc3VsdCArIG1hcC1nZXQoJG51bWJlcnMsICRjaGFyYWN0ZXIpIC8gJGRpZ2l0cztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEByZXR1cm4gaWYoJG1pbnVzLCAtJHJlc3VsdCwgJHJlc3VsdCk7XHJcbn1cclxuXHJcbi8vL1xyXG4vLy8gQWRkIGAkdW5pdGAgdG8gYCR2YWx1ZWBcclxuLy8vXHJcbi8vLyBAcGFyYW0ge051bWJlcn0gJHZhbHVlIC0gVmFsdWUgdG8gYWRkIHVuaXQgdG9cclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdW5pdCAtIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdW5pdFxyXG4vLy9cclxuLy8vIEByZXR1cm4ge051bWJlcn0gLSBgJHZhbHVlYCBleHByZXNzZWQgaW4gYCR1bml0YFxyXG4vLy9cclxuQGZ1bmN0aW9uIHRvLWxlbmd0aCgkdmFsdWUsICR1bml0KSB7XHJcbiAgJHVuaXRzOiAoXHJcbiAgICAncHgnOiAxcHgsXHJcbiAgICAnY20nOiAxY20sXHJcbiAgICAnbW0nOiAxbW0sXHJcbiAgICAnJSc6IDElLFxyXG4gICAgJ2NoJzogMWNoLFxyXG4gICAgJ3BjJzogMXBjLFxyXG4gICAgJ2luJzogMWluLFxyXG4gICAgJ2VtJzogMWVtLFxyXG4gICAgJ3JlbSc6IDFyZW0sXHJcbiAgICAncHQnOiAxcHQsXHJcbiAgICAnZXgnOiAxZXgsXHJcbiAgICAndncnOiAxdncsXHJcbiAgICAndmgnOiAxdmgsXHJcbiAgICAndm1pbic6IDF2bWluLFxyXG4gICAgJ3ZtYXgnOiAxdm1heCxcclxuICApO1xyXG5cclxuICBAaWYgbm90IGluZGV4KG1hcC1rZXlzKCR1bml0cyksICR1bml0KSB7XHJcbiAgICAkXzogaW0tbG9nKCdJbnZhbGlkIHVuaXQgYCN7JHVuaXR9YC4nKTtcclxuICB9XHJcblxyXG4gIEByZXR1cm4gJHZhbHVlICogbWFwLWdldCgkdW5pdHMsICR1bml0KTtcclxufVxyXG5cclxuLy8vXHJcbi8vLyBUaGlzIG1peGluIGFpbXMgYXQgcmVkZWZpbmluZyB0aGUgY29uZmlndXJhdGlvbiBqdXN0IGZvciB0aGUgc2NvcGUgb2ZcclxuLy8vIHRoZSBjYWxsLiBJdCBpcyBoZWxwZnVsIHdoZW4gaGF2aW5nIGEgY29tcG9uZW50IG5lZWRpbmcgYW4gZXh0ZW5kZWRcclxuLy8vIGNvbmZpZ3VyYXRpb24gc3VjaCBhcyBjdXN0b20gYnJlYWtwb2ludHMgKHJlZmVycmVkIHRvIGFzIHR3ZWFrcG9pbnRzKVxyXG4vLy8gZm9yIGluc3RhbmNlLlxyXG4vLy9cclxuLy8vIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxyXG4vLy9cclxuLy8vIEBwYXJhbSB7TWFwfSAkdHdlYWtwb2ludHMgWygpXSAtIE1hcCBvZiB0d2Vha3BvaW50cyB0byBiZSBtZXJnZWQgd2l0aCBgJGJyZWFrcG9pbnRzYFxyXG4vLy8gQHBhcmFtIHtNYXB9ICR0d2Vhay1tZWRpYS1leHByZXNzaW9ucyBbKCldIC0gTWFwIG9mIHR3ZWFrZWQgbWVkaWEgZXhwcmVzc2lvbnMgdG8gYmUgbWVyZ2VkIHdpdGggYCRtZWRpYS1leHByZXNzaW9uYFxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBFeHRlbmQgdGhlIGdsb2JhbCBicmVha3BvaW50cyB3aXRoIGEgdHdlYWtwb2ludFxyXG4vLy8gIEBpbmNsdWRlIG1lZGlhLWNvbnRleHQoKCdjdXN0b20nOiA2NzhweCkpIHtcclxuLy8vICAgIC5mb28ge1xyXG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnPnBob25lJywgJzw9Y3VzdG9tJykge1xyXG4vLy8gICAgICAgLy8gLi4uXHJcbi8vLyAgICAgIH1cclxuLy8vICAgIH1cclxuLy8vICB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIEV4dGVuZCB0aGUgZ2xvYmFsIG1lZGlhIGV4cHJlc3Npb25zIHdpdGggYSBjdXN0b20gb25lXHJcbi8vLyAgQGluY2x1ZGUgbWVkaWEtY29udGV4dCgkdHdlYWstbWVkaWEtZXhwcmVzc2lvbnM6ICgnYWxsJzogJ2FsbCcpKSB7XHJcbi8vLyAgICAuZm9vIHtcclxuLy8vICAgICAgQGluY2x1ZGUgbWVkaWEoJ2FsbCcsICc+cGhvbmUnKSB7XHJcbi8vLyAgICAgICAvLyAuLi5cclxuLy8vICAgICAgfVxyXG4vLy8gICAgfVxyXG4vLy8gIH1cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gRXh0ZW5kIGJvdGggY29uZmlndXJhdGlvbiBtYXBzXHJcbi8vLyAgQGluY2x1ZGUgbWVkaWEtY29udGV4dCgoJ2N1c3RvbSc6IDY3OHB4KSwgKCdhbGwnOiAnYWxsJykpIHtcclxuLy8vICAgIC5mb28ge1xyXG4vLy8gICAgICBAaW5jbHVkZSBtZWRpYSgnYWxsJywgJz5waG9uZScsICc8PWN1c3RvbScpIHtcclxuLy8vICAgICAgIC8vIC4uLlxyXG4vLy8gICAgICB9XHJcbi8vLyAgICB9XHJcbi8vLyAgfVxyXG4vLy9cclxuQG1peGluIG1lZGlhLWNvbnRleHQoJHR3ZWFrcG9pbnRzOiAoKSwgJHR3ZWFrLW1lZGlhLWV4cHJlc3Npb25zOiAoKSkge1xyXG4gIC8vIFNhdmUgZ2xvYmFsIGNvbmZpZ3VyYXRpb25cclxuICAkZ2xvYmFsLWJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHM7XHJcbiAgJGdsb2JhbC1tZWRpYS1leHByZXNzaW9uczogJG1lZGlhLWV4cHJlc3Npb25zO1xyXG5cclxuICAvLyBVcGRhdGUgZ2xvYmFsIGNvbmZpZ3VyYXRpb25cclxuICAkYnJlYWtwb2ludHM6IG1hcC1tZXJnZSgkYnJlYWtwb2ludHMsICR0d2Vha3BvaW50cykgIWdsb2JhbDtcclxuICAkbWVkaWEtZXhwcmVzc2lvbnM6IG1hcC1tZXJnZSgkbWVkaWEtZXhwcmVzc2lvbnMsICR0d2Vhay1tZWRpYS1leHByZXNzaW9ucykgIWdsb2JhbDtcclxuXHJcbiAgQGNvbnRlbnQ7XHJcblxyXG4gIC8vIFJlc3RvcmUgZ2xvYmFsIGNvbmZpZ3VyYXRpb25cclxuICAkYnJlYWtwb2ludHM6ICRnbG9iYWwtYnJlYWtwb2ludHMgIWdsb2JhbDtcclxuICAkbWVkaWEtZXhwcmVzc2lvbnM6ICRnbG9iYWwtbWVkaWEtZXhwcmVzc2lvbnMgIWdsb2JhbDtcclxufVxyXG5cclxuLy8vL1xyXG4vLy8gaW5jbHVkZS1tZWRpYSBwdWJsaWMgZXhwb3NlZCBBUElcclxuLy8vIEBhdXRob3IgRWR1YXJkbyBCb3VjYXNcclxuLy8vIEBhY2Nlc3MgcHVibGljXHJcbi8vLy9cclxuXHJcbi8vL1xyXG4vLy8gR2VuZXJhdGVzIGEgbWVkaWEgcXVlcnkgYmFzZWQgb24gYSBsaXN0IG9mIGNvbmRpdGlvbnNcclxuLy8vXHJcbi8vLyBAcGFyYW0ge0FyZ2xpc3R9ICAgJGNvbmRpdGlvbnMgIC0gTWVkaWEgcXVlcnkgY29uZGl0aW9uc1xyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIGEgc2luZ2xlIHNldCBicmVha3BvaW50XHJcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz5waG9uZScpIHsgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIHR3byBzZXQgYnJlYWtwb2ludHNcclxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPnBob25lJywgJzw9dGFibGV0JykgeyB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIFdpdGggY3VzdG9tIHZhbHVlc1xyXG4vLy8gIEBpbmNsdWRlIG1lZGlhKCc+PTM1OHB4JywgJzw4NTBweCcpIHsgfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlIHNjc3MgLSBXaXRoIHNldCBicmVha3BvaW50cyB3aXRoIGN1c3RvbSB2YWx1ZXNcclxuLy8vICBAaW5jbHVkZSBtZWRpYSgnPmRlc2t0b3AnLCAnPD0xMzUwcHgnKSB7IH1cclxuLy8vXHJcbi8vLyBAZXhhbXBsZSBzY3NzIC0gV2l0aCBhIHN0YXRpYyBleHByZXNzaW9uXHJcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJ3JldGluYTJ4JykgeyB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGUgc2NzcyAtIE1peGluZyBldmVyeXRoaW5nXHJcbi8vLyAgQGluY2x1ZGUgbWVkaWEoJz49MzUwcHgnLCAnPHRhYmxldCcsICdyZXRpbmEzeCcpIHsgfVxyXG4vLy9cclxuQG1peGluIG1lZGlhKCRjb25kaXRpb25zLi4uKSB7XHJcbiAgQGlmICgkaW0tbWVkaWEtc3VwcG9ydCBhbmQgbGVuZ3RoKCRjb25kaXRpb25zKSA9PSAwKSBvclxyXG4gICAgKG5vdCAkaW0tbWVkaWEtc3VwcG9ydCBhbmQgaW0taW50ZXJjZXB0cy1zdGF0aWMtYnJlYWtwb2ludCgkY29uZGl0aW9ucy4uLikpXHJcbiAge1xyXG4gICAgQGNvbnRlbnQ7XHJcbiAgfSBAZWxzZSBpZiAoJGltLW1lZGlhLXN1cHBvcnQgYW5kIGxlbmd0aCgkY29uZGl0aW9ucykgPiAwKSB7XHJcbiAgICBAbWVkaWEgI3t1bnF1b3RlKHBhcnNlLWV4cHJlc3Npb24obnRoKCRjb25kaXRpb25zLCAxKSkpfSB7XHJcbiAgICAgIC8vIFJlY3Vyc2l2ZSBjYWxsXHJcbiAgICAgIEBpbmNsdWRlIG1lZGlhKHNsaWNlKCRjb25kaXRpb25zLCAyKSAuLi4pIHtcclxuICAgICAgICBAY29udGVudDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0= */
