@charset "UTF-8";
/* Document
 * ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 */
:where(html) {
  line-height: 1.15; /* 1 */
}
/* Sections
 * ========================================================================== */
/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Edge, Firefox, and Safari.
 */
:where(h1) {
  margin-block-start: 0.67em;
  margin-block-end: 0.67em;
  font-size: 2em;
}
/* Grouping content
 * ========================================================================== */
/**
 * Remove the margin on nested lists in Chrome, Edge, and Safari.
 */
:where(dl, ol, ul) :where(dl, ol, ul) {
  margin-block-start: 0;
  margin-block-end: 0;
}
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Correct the inheritance of border color in Firefox.
 */
:where(hr) {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  color: inherit; /* 2 */
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
:where(pre) {
  font-size: 1em; /* 2 */
  font-family: monospace, monospace; /* 1 */
}
/* Text-level semantics
 * ========================================================================== */
/**
 * Add the correct text decoration in Safari.
 */
:where(abbr[title]) {
  text-decoration: underline;
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}
/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
:where(b, strong) {
  font-weight: bolder;
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
:where(code, kbd, samp) {
  font-size: 1em; /* 2 */
  font-family: monospace, monospace; /* 1 */
}
/**
 * Add the correct font size in all browsers.
 */
:where(small) {
  font-size: 80%;
}
/* Tabular data
 * ========================================================================== */
/**
 * 1. Correct table border color in Chrome, Edge, and Safari.
 * 2. Remove text indentation from table contents in Chrome, Edge, and Safari.
 */
:where(table) {
  border-color: currentColor; /* 1 */
  text-indent: 0; /* 2 */
}
/* Forms
 * ========================================================================== */
/**
 * Remove the margin on controls in Safari.
 */
:where(button, input, select) {
  margin: 0;
}
/**
 * Remove the inheritance of text transform in Firefox.
 */
:where(button) {
  text-transform: none;
}
/**
 * Correct the inability to style buttons in iOS and Safari.
 */
:where(button, input:is([type="button" i], [type="reset" i], [type="submit" i])) {
  -webkit-appearance: button;
}
/**
 * Add the correct vertical alignment in Chrome, Edge, and Firefox.
 */
:where(progress) {
  vertical-align: baseline;
}
/**
 * Remove the inheritance of text transform in Firefox.
 */
:where(select) {
  text-transform: none;
}
/**
 * Remove the margin in Firefox and Safari.
 */
:where(textarea) {
  margin: 0;
}
/**
 * 1. Correct the odd appearance in Chrome, Edge, and Safari.
 * 2. Correct the outline style in Safari.
 */
:where(input[type="search" i]) {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}
/**
 * Correct the cursor style of increment and decrement buttons in Safari.
 */
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}
/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}
/**
 * Remove the inner padding in Chrome, Edge, and Safari on macOS.
 */
::-webkit-search-decoration {
  -webkit-appearance: none;
}
/**
 * 1. Correct the inability to style upload buttons in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}
/**
 * Remove the inner border and padding of focus outlines in Firefox.
 */
:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focus-inner {
  padding: 0;
  border-style: none;
}
/**
 * Restore the focus outline styles unset by the previous rule in Firefox.
 */
:where(button, input:is([type="button" i], [type="color" i], [type="reset" i], [type="submit" i]))::-moz-focusring {
  outline: 1px dotted ButtonText;
}
/**
 * Remove the additional :invalid styles in Firefox.
 */
:where(:-moz-ui-invalid) {
  box-shadow: none;
}
/* Interactive
 * ========================================================================== */
/*
 * Add the correct styles in Safari.
 */
:where(dialog) {
  position: absolute;
  right: 0;
  left: 0;
  width: -moz-fit-content;
  width: fit-content;
  height: -moz-fit-content;
  height: fit-content;
  margin: auto;
  padding: 1em;
  border: solid;
  background-color: white;
  color: black;
}
:where(dialog:not([open])) {
  display: none;
}
/*
 * Add the correct display in all browsers.
 */
:where(summary) {
  display: list-item;
}
a:not([class]) {
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

hr {
  display: block;
  height: 1px;
  margin: 1em 0;
  padding: 0;
  border: 0;
  border-top: 1px solid #ccc;
}

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

input,
button,
textarea,
select {
  font: inherit;
}

.browserupgrade {
  margin: 0.2em 0;
  padding: 0.2em 0;
  background: #ccc;
  color: #000;
}

.hidden {
  display: none !important;
}

.visuallyhidden {
  clip: rect(0 0 0 0);
  -webkit-overflow-scrolling: touch;
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  border: 0;
  white-space: nowrap;
}

.invisible {
  visibility: hidden;
}

.container {
  display: flex;
  flex-direction: column;
  padding: 0 10px;
}

.description {
  margin: 0;
  font-weight: 400;
  font-size: calc(0.875rem + (16 - 14) * ((100vw - 20rem) / (1300 - 320)));
  line-height: 140%;
}

.section__title {
  margin: 0;
  font-weight: 700;
  font-size: calc(1.5625rem + (48 - 25) * ((100vw - 20rem) / (1300 - 320)));
  line-height: 120%;
}

button {
  padding: 10px 30px;
  border: none;
  border-radius: 50px;
  background: linear-gradient(94.78deg, #DF5950 11.19%, #451046 93.72%);
  color: #fff;
  font-weight: 700;
  font-size: 1rem;
  line-height: 1.5;
  cursor: pointer;
  transition: 0.3s ease;
}

button:hover {
  box-shadow: -5px -5px 20px #6e1970, 5px 5px 20px #e7827b;
}

button:active {
  transform: translateY(0px);
  box-shadow: none;
}

/**************************\
  Basic Modal Styles
\**************************/
.modal {
  font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif;
}

.modal__overlay {
  display: flex;
  z-index: 1;
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.6);
}

.modal__container {
  -webkit-overflow-scrolling: touch;
  box-sizing: border-box;
  max-width: 500px;
  max-height: 100vh;
  max-height: calc(var(--vh, 1vh) * 100);
  padding: 30px;
  overflow-y: auto;
  border-radius: 4px;
  background-color: #fff;
}

.modal__header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.modal__title {
  box-sizing: border-box;
  margin-top: 0;
  margin-bottom: 0;
  color: #00449e;
  font-weight: 600;
  font-size: 1.25rem;
  line-height: 1.25;
}

.modal__close {
  border: 0;
  background: transparent;
}

.modal__header .modal__close:before {
  content: '\2715';
}

.modal__content {
  margin-top: 2rem;
  margin-bottom: 2rem;
  color: rgba(0, 0, 0, 0.8);
  line-height: 1.5;
}

.modal__btn {
  -webkit-appearance: button;
  -moz-osx-font-smoothing: grayscale;
  -webkit-backface-visibility: hidden;
  margin: 0;
  padding: 0.5rem 1rem;
  overflow: visible;
  transform: translateZ(0);
  border-width: 0;
  border-style: none;
  border-radius: 0.25rem;
  backface-visibility: hidden;
  background-color: #e6e6e6;
  color: rgba(0, 0, 0, 0.8);
  font-size: 0.875rem;
  line-height: 1.15;
  text-transform: none;
  cursor: pointer;
  transition: transform 0.25s ease-out;
  will-change: transform;
}

.modal__btn:focus, .modal__btn:hover {
  transform: scale(1.05);
}

.modal__btn-primary {
  background-color: #00449e;
  color: #fff;
}

/**************************\
  Demo Animation Style
\**************************/
@keyframes mmfadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes mmfadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes mmslideIn {
  from {
    transform: translateY(15%);
  }
  to {
    transform: translateY(0);
  }
}

@keyframes mmslideOut {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-10%);
  }
}

.micromodal-slide {
  display: none;
}

.micromodal-slide.is-open {
  display: block;
}

.micromodal-slide[aria-hidden='false'] .modal__overlay {
  animation: mmfadeIn 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide[aria-hidden='false'] .modal__container {
  animation: mmslideIn 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide[aria-hidden='true'] .modal__overlay {
  animation: mmfadeOut 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide[aria-hidden='true'] .modal__container {
  animation: mmslideOut 0.3s cubic-bezier(0, 0, 0.2, 1);
}

.micromodal-slide .modal__container,
.micromodal-slide .modal__overlay {
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  will-change: transform;
}

.icon-mono {
  fill: currentColor;
  display: inline-block;
  height: 1em;
}

.facebook {
  width: 1em;
  font-size: 2.4rem;
}

.instagram {
  width: 1em;
  font-size: 2.4rem;
}

.vk {
  width: 1em;
  font-size: 2.4rem;
}

.youtube {
  width: 1em;
  font-size: 2.4rem;
}

.icon-multi {
  display: inline-block;
  height: 1em;
}

.icon-js {
  width: 0.73052em;
  font-size: 30.8rem;
}

@keyframes hoverBackground {
  from {
    right: 150%;
  }
  to {
    right: -10px;
  }
}

@keyframes unHoverBackground {
  from {
    right: -10px;
  }
  to {
    right: 150%;
  }
}
.page-footer {
  margin: 0 auto;
}

.page-footer p {
  margin: 110px 0;
  font-style: normal;
  font-weight: 700;
  font-size: 1rem;
  line-height: 1.25;
}
.second__block {
  margin-bottom: calc(100px + (200 - 100) * ((100vw - 320px) / (1300 - 320)));
}

.second__block .content {
  display: flex;
  align-items: center;
  gap: calc(10px + (140 - 10) * ((100vw - 320px) / (1300 - 320)));
}

.second__block .content .content__left {
  position: relative;
  min-width: calc(200px + (499 - 200) * ((100vw - 320px) / (1300 - 320)));
  height: calc(200px + (500 - 200) * ((100vw - 320px) / (1300 - 320)));
  background: linear-gradient(to right, #C89AFC, #7C6AFA);
}

.second__block .content .content__left::before {
  display: block;
  position: absolute;
  top: 30px;
  right: 30px;
  bottom: 30px;
  left: 30px;
  background-color: #000;
  content: '';
}

.second__block .content .content__left .system__block {
  display: block;
  position: absolute;
  bottom: -40px;
  left: 7%;
  width: 100%;
  max-width: 446px;
  height: auto;
}

.second__block .content .content__right {
  display: flex;
  z-index: 2;
  flex-direction: column;
  padding-right: 10px;
  padding-left: 10px;
  gap: calc(10px + (45 - 10) * ((100vw - 320px) / (1300 - 320)));
}

.third__block {
  margin-bottom: 200px;
}

.third__block .container__title {
  display: grid;
  grid-template-rows: auto auto;
  grid-template-columns: auto 1fr;
  grid-template-areas: "icon title" "descr descr";
  align-items: center;
  margin-bottom: 80px;
  gap: 50px 20px;
}

.third__block .container__title .icon {
  grid-area: icon;
}

.third__block .container__title .section__title {
  grid-area: title;
}

.third__block .container__title .description {
  grid-area: descr;
  max-width: 411px;
  opacity: 0.5 !important;
}

.third__block .container .skyscraper {
  display: flex;
}

.third__block .container .skyscraper .floor {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 324px;
  gap: 20px;
}

.third__block .container .skyscraper .percent {
  margin: 0;
  font-weight: 700;
  font-size: calc(1.25rem + (36 - 20) * ((100vw - 20rem) / (1300 - 320)));
  line-height: 140%;
}

.third__block .container .skyscraper .description {
  padding: 10px;
  opacity: 0.5 !important;
}

.third__block .container .skyscraper .color_block {
  background: linear-gradient(94.26deg, #C89AFC 9.51%, #7C6AFA 90.23%);
}

.third__block .container .skyscraper .p100 .color_block {
  height: 80px;
}

.third__block .container .skyscraper .p75 .color_block {
  height: 60px;
  transform: matrix(-1, 0, 0, 1, 0, 0);
}

.third__block .container .skyscraper .p50 .color_block {
  height: 30px;
}

.third__block .container .skyscraper .final .color_block {
  height: 10px;
  transform: matrix(-1, 0, 0, 1, 0, 0);
}

.fourth__container {
  display: grid;
  grid-template-rows: auto auto;
  grid-template-columns: repeat(3, 1fr);
  grid-template-areas: "title title title" "comp flash usb";
  margin-bottom: 200px;
  text-align: center;
}

.fourth__container .section__title {
  grid-area: title;
  margin-bottom: calc(50px + (120 - 50) * ((100vw - 320px) / (1300 - 320)));
}

.fourth__container .advantage {
  max-width: calc(200px + (358 - 200) * ((100vw - 700px) / (1300 - 700)));
}

.fourth__container .advantage__title {
  grid-area: title;
  margin-top: 60px;
  margin-bottom: 30px;
  font-weight: 500;
  font-size: calc(1.125rem + (24 - 18) * ((100vw - 20rem) / (1300 - 320)));
  line-height: 140%;
  letter-spacing: 0.0625rem;
}

.fourth__container .advantage__text {
  grid-area: text;
  margin: 0;
  font-weight: 400;
  font-size: 0.875rem;
  line-height: 160%;
  opacity: 0.5;
}

.fourth__container .comp {
  grid-area: comp;
}

.fourth__container .flash {
  grid-area: flash;
}

.fourth__container .usb {
  grid-area: usb;
}

.fourth__container picture {
  grid-area: icon;
}

.fifth__block {
  margin-bottom: 150px;
}

.fifth__block .container__title {
  display: flex;
  align-items: flex-start;
  gap: 20px;
}

.fifth__block .container__title .icon {
  transform: scale(-1, -1);
}

.fifth__block .partners {
  display: grid;
  grid-template-rows: auto auto;
  grid-template-columns: repeat(4, 1fr);
}

.fifth__block .partners .partner {
  display: flex;
  align-items: center;
  max-width: 320px;
  height: 150px;
  padding-top: calc(5px + (30 - 5) * ((100vw - 320px) / (1300 - 320)));
  padding-right: calc(20px + (65 - 20) * ((100vw - 320px) / (1300 - 320)));
  padding-bottom: calc(5px + (30 - 5) * ((100vw - 320px) / (1300 - 320)));
  padding-left: calc(20px + (65 - 20) * ((100vw - 320px) / (1300 - 320)));
  border-right: 1px solid rgba(255, 255, 255, 0.3);
  border-bottom: 1px solid rgba(255, 255, 255, 0.3);
}

.fifth__block .partners .partner picture {
  display: block;
  width: 100%;
  max-width: 100%;
  height: auto;
}

.fifth__block .partners .partner:nth-child(n + 5) {
  border-bottom: none;
}

.fifth__block .partners .partner:nth-child(8), .fifth__block .partners .partner:nth-child(4) {
  border-right: none;
}

.sixth__block {
  margin-bottom: 150px;
}

.sixth__block .container__title {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 80px;
  gap: 30px;
}

.sixth__block .container__title .icon {
  transform: rotate(135deg);
}

.sixth__block .container__title .description {
  max-width: 411px;
  text-align: center;
  opacity: 0.5 !important;
}

.sixth__block .program {
  display: grid;
  grid-template-rows: repeat(7, auto);
  grid-template-columns: auto 6px auto;
  grid-template-areas: "week-1 hr ." ". hr week-2" "week-3 hr ." ". hr week-4" "week-5 hr ." ". hr week-6" "week-7 hr .";
  align-items: center;
  justify-content: center;
  justify-items: center;
  gap: calc(10px + (60 - 10) * ((100vw - 320px) / (1300 - 320)));
}

.sixth__block .program hr {
  grid-area: hr;
  width: 6px;
  height: 100%;
  background: linear-gradient(94.26deg, #C89AFC 9.51%, #7C6AFA 90.23%);
}

.sixth__block .program .week {
  display: flex;
  position: relative;
  flex-direction: column;
  max-width: calc(100px + (250 - 100) * ((100vw - 320px) / (1300 - 320)));
  gap: 10px;
}

.sixth__block .program .week:nth-child(2) {
  grid-area: week-1;
}

.sixth__block .program .week:nth-child(3) {
  grid-area: week-2;
}

.sixth__block .program .week:nth-child(4) {
  grid-area: week-3;
}

.sixth__block .program .week:nth-child(5) {
  grid-area: week-4;
}

.sixth__block .program .week:nth-child(6) {
  grid-area: week-5;
}

.sixth__block .program .week:nth-child(7) {
  grid-area: week-6;
}

.sixth__block .program .week:nth-child(8) {
  grid-area: week-7;
}

.sixth__block .program .week:nth-child(even)::before {
  display: block;
  position: absolute;
  top: 50%;
  right: -60px;
  width: 40px;
  height: 2px;
  border: 1px solid rgba(255, 255, 255, 0.7);
  content: '';
  opacity: 0.3;
}

.sixth__block .program .week:nth-child(odd)::before {
  display: block;
  position: absolute;
  top: 50%;
  left: -60px;
  width: 40px;
  border: 1px solid rgba(255, 255, 255, 0.7);
  content: '';
  opacity: 0.3;
}

.sixth__block .program .week__title {
  margin: 0;
  font-weight: 400;
  font-size: 0.875rem;
  line-height: 160%;
  text-align: right;
  opacity: 0.5;
}

.sixth__block .program .week__description {
  margin: 0;
  font-weight: 400;
  font-size: calc(0.875rem + (18 - 14) * ((100vw - 20rem) / (1300 - 320)));
  line-height: 160%;
  text-align: right;
}

.seventh__block {
  margin-bottom: 150px;
}

.seventh__block .container__title {
  display: grid;
  grid-template-columns: auto 1fr;
  grid-template-areas: "icon title";
  align-items: center;
  margin-bottom: 80px;
  gap: 50px 20px;
}

.seventh__block .container__title .icon {
  grid-area: icon;
  transform: rotate(-45deg);
}

.seventh__block .container__title .section__title {
  grid-area: title;
}

.seventh__block .container .teachers {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
  gap: 30px;
}

.seventh__block .container .teachers .teacher {
  display: grid;
  grid-template-rows: repeat(4, auto);
  grid-template-columns: 1fr;
  justify-content: center;
  justify-items: center;
  gap: 20px;
  text-align: center;
}

.seventh__block .container .teachers .teacher__icon {
  display: block;
  width: 100%;
  max-width: 100%;
  height: auto;
  border-radius: 50%;
}

.seventh__block .container .teachers .teacher__name {
  margin: 0;
}

.seventh__block .container .teachers .teacher__description {
  margin: 0;
}

.seventh__block .container .teachers .teacher__bio {
  max-width: 143px;
}

.eight__block .container {
  display: grid;
  justify-items: center;
  gap: 40px;
}

.eight__block .container .description {
  max-width: 411px;
  text-align: center;
  opacity: 0.5;
}

.eight__block .container .form {
  display: flex;
  align-items: center;
  justify-content: center;
}

.eight__block .container .form__input {
  width: 353px;
  height: 40px;
  padding: 5px 30px;
  border: none;
  border-radius: 50px 0px 0px 50px;
}

.eight__block .container .form__button {
  height: 44px;
  margin-left: -25px;
}

.eight__block .container .social {
  display: grid;
  grid-template-columns: repeat(4, auto);
  align-items: center;
  gap: 30px;
}

.eight__block .container .social__icon {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: center;
  width: 50px;
  height: 50px;
  padding: 10px;
  border-radius: 50%;
  background: linear-gradient(94.26deg, #C89AFC 9.51%, #7C6AFA 90.23%);
  cursor: pointer;
}

.eight__block .container .social__icon .logo {
  display: block;
  z-index: 3;
  position: relative;
  width: 100%;
  max-width: 100%;
  height: auto;
  object-fit: none;
}

.eight__block .container .social__icon::before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  border-radius: 50%;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  background: linear-gradient(94.26deg, #6B5ADA 9.51%, #7C6AFA 90.23%);
  content: "";
  opacity: 0;
  transition: opacity 0.3s linear;
  will-change: opacity;
}

.eight__block .container .social__icon:hover:hover::before {
  opacity: 1;
}

.modal__container {
  background: linear-gradient(94.78deg, #DF5950 11.19%, #451046 93.72%);
}

.modal__title, .modal__btn, .modal__content {
  color: #fff;
}

.modal__btn {
  margin-right: 20px;
}

.modal__close {
  padding: 10px 15px;
}

.modal__content form {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.modal__content form input {
  width: 95%;
  padding: 5px 20px;
  border-radius: 30px;
}

.modal .modal2__header {
  justify-content: end;
}

.modal #modal-2-content .modal2__icon {
  display: none;
  border-radius: 50%;
}

.modal #modal-2-content .content__header {
  display: flex;
  align-items: center;
  gap: 10px;
}

.modal #modal-2-content .content__header_name {
  font-size: 1.75rem;
}

.modal #modal-2-content .content__header_title {
  font-size: 1.25rem;
}

.modal #modal-2-content .active {
  display: block;
}

@media (min-width: 1024px){
  .container {
    max-width: 1300px;
    margin-right: auto;
    margin-left: auto;
  }
}

@media (min-width: 1300px){
  .description {
    font-size: 1rem;
  }
  .section__title {
    font-size: 3rem;
  }
  .second__block {
    margin-bottom: 200px;
  }
  .second__block .content {
    gap: 140px;
  }
  .second__block .content .content__left {
    height: 500px;
  }
  .second__block .content .content__left {
    min-width: 499px;
  }
  .second__block .content .content__right {
    gap: 45px;
  }
  .third__block .container .skyscraper .percent {
    font-size: 2.25rem;
  }
  .fourth__container .section__title {
    margin-bottom: 120px;
  }
  .fourth__container .advantage {
    max-width: 358px;
  }
  .fourth__container .advantage__title {
    font-size: 1.5rem;
  }
  .fifth__block .partners .partner {
    padding-right: 65px;
  }
  .fifth__block .partners .partner {
    padding-left: 65px;
  }
  .fifth__block .partners .partner {
    padding-top: 30px;
  }
  .fifth__block .partners .partner {
    padding-bottom: 30px;
  }
  .sixth__block .program {
    gap: 60px;
  }
  .sixth__block .program .week {
    max-width: 250px;
  }
  .sixth__block .program .week__description {
    font-size: 1.125rem;
  }
}

@media (max-width: 1280px){
  .fifth__block .partners {
    grid-template-rows: repeat(4, auto);
    grid-template-columns: repeat(2, 50%);
    justify-items: center;
  }
  .fifth__block .partners .partner, .fifth__block .partners .partner:nth-child(n + 5), .fifth__block .partners .partner:nth-child(8), .fifth__block .partners .partner:nth-child(4) {
    border: 1px solid rgba(255, 255, 255, 0.3);
  }
}

@media (max-width: 700px){
  .third__block {
    margin-bottom: 100px;
  }
  .third__block .container__title {
    grid-template-columns: auto auto;
    justify-content: center;
    gap: 30px 0;
  }
  .third__block .container .skyscraper {
    flex-direction: column;
  }
  .third__block .container .skyscraper .floor {
    flex-direction: row;
    align-items: center;
    justify-content: end;
    width: 100%;
    height: 200px;
  }
  .third__block .container .skyscraper .description {
    max-width: 40%;
  }
  .third__block .container .skyscraper .color_block {
    min-width: 200px;
    transform: rotate(90deg);
  }
  .third__block .container .skyscraper .p75 .color_block {
    transform: matrix(-1, 0, 0, 1, 0, 0) rotate(-90deg);
  }
  .third__block .container .skyscraper .final .color_block {
    transform: matrix(-1, 0, 0, 1, 0, 0) rotate(-90deg);
  }
  .fourth__container {
    grid-template-rows: auto;
    grid-template-columns: 1fr;
    grid-template-areas: "title" "comp" "flash" "usb";
    margin-bottom: 100px;
    gap: 30px;
  }
  .fourth__container .advantage {
    max-width: 200px;
  }
  .fourth__container .advantage {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-areas: "icon" "title" "text";
    justify-items: center;
    max-width: 90%;
    gap: 10px 20px;
    text-align: center;
  }
  .fourth__container .advantage__title {
    margin-top: 0;
    margin-bottom: 0;
  }
  .seventh__block .container__title {
    grid-template-columns: auto auto;
    justify-content: center;
    gap: 30px 0;
  }
}

@media (max-width: 700px) and (max-width: 410px){
  .third__block .container .skyscraper {
    gap: 20px;
  }
}

@media (max-width: 640px){
  .eight__block .container .form__input {
    width: 250px;
  }
}

@media (max-width: 570px){
  .second__block .content {
    flex-wrap: wrap;
    justify-content: center;
  }
}

@media (max-width: 545px){
  .fifth__block .partners {
    grid-template-rows: auto;
    grid-template-columns: 1fr;
    gap: 10px;
  }
}

@media (max-width: 520px){
  .third__block .container .skyscraper .percent {
    display: none;
  }
  .third__block .container .skyscraper .p100 .color_block {
    position: relative;
  }
  .third__block .container .skyscraper .p100 .color_block::before {
    position: absolute;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transform: translate(-50%, -50%) scale(-1, -1);
    content: '100%';
    font-weight: 700;
    font-size: calc(1.25rem + (36 - 20) * ((100vw - 20rem) / (1300 - 320)));
  }
  .third__block .container .skyscraper .p75 .color_block {
    position: relative;
  }
  .third__block .container .skyscraper .p75 .color_block::before {
    position: absolute;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transform: translate(-50%, -50%) scale(1, -1);
    content: '75%';
    font-weight: 700;
    font-size: calc(1.25rem + (36 - 20) * ((100vw - 20rem) / (1300 - 320)));
  }
  .third__block .container .skyscraper .p50 .color_block {
    position: relative;
  }
  .third__block .container .skyscraper .p50 .color_block::before {
    position: absolute;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transform: translate(-50%, -50%) scale(-1, -1);
    content: '50%';
    font-weight: 700;
    font-size: calc(1.25rem + (36 - 20) * ((100vw - 20rem) / (1300 - 320)));
  }
  .third__block .container .skyscraper .final .color_block {
    position: relative;
  }
  .third__block .container .skyscraper .final .color_block::before {
    position: absolute;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transform: translate(-50%, -50%) scale(1, -1);
    content: 'Итого';
    font-weight: 700;
    font-size: calc(1.25rem + (36 - 20) * ((100vw - 20rem) / (1300 - 320)));
  }
}

@media (max-width: 520px) and (max-width: 320px){
  .third__block .container .skyscraper .p100 .color_block::before {
    font-size: 1.25rem;
  }
  .third__block .container .skyscraper .p75 .color_block::before {
    font-size: 1.25rem;
  }
  .third__block .container .skyscraper .p50 .color_block::before {
    font-size: 1.25rem;
  }
  .third__block .container .skyscraper .final .color_block::before {
    font-size: 1.25rem;
  }
}

@media (max-width: 520px) and (min-width: 1300px){
  .third__block .container .skyscraper .p100 .color_block::before {
    font-size: 2.25rem;
  }
  .third__block .container .skyscraper .p75 .color_block::before {
    font-size: 2.25rem;
  }
  .third__block .container .skyscraper .p50 .color_block::before {
    font-size: 2.25rem;
  }
  .third__block .container .skyscraper .final .color_block::before {
    font-size: 2.25rem;
  }
}

@media (max-width: 500px){
  .third__block .container__title .description {
    max-width: 90%;
  }
  .sixth__block .container__title .description {
    max-width: 90%;
  }
  .eight__block .container .description {
    max-width: 90%;
  }
  .eight__block .container .form {
    flex-direction: column;
    width: 100%;
    gap: 10px;
  }
  .eight__block .container .form__input {
    width: 90%;
    border-radius: 50px 50px;
  }
}

@media (max-width: 410px){
  .third__block .container__title {
    grid-template-columns: 1fr;
    grid-template-areas: "icon" "title" "descr";
    justify-items: center;
    margin-bottom: 40px;
  }
  .third__block .container .skyscraper .floor {
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: auto;
    gap: 5px;
  }
  .third__block .container .skyscraper .description {
    max-width: 100%;
  }
  .third__block .container .skyscraper .color_block {
    min-width: 95%;
    transform: rotate(180deg);
  }
  .third__block .container .skyscraper .p75 .color_block {
    transform: matrix(-1, 0, 0, 1, 0, 0) rotate(180deg);
  }
  .third__block .container .skyscraper .final .color_block {
    transform: matrix(-1, 0, 0, 1, 0, 0) rotate(-180deg);
  }
  .seventh__block .container__title {
    grid-template-columns: 1fr;
    grid-template-areas: "icon" "title";
    justify-items: center;
    max-width: 90%;
    margin-bottom: 40px;
    text-align: center;
  }
}

@media (max-width: 400px){
  .eight__block .container .social {
    grid-template-columns: 1fr 1fr;
  }
}

@media (max-width: 320px){
  .description {
    font-size: 0.875rem;
  }
  .section__title {
    font-size: 1.5625rem;
  }
  .second__block {
    margin-bottom: 100px;
  }
  .second__block .content {
    gap: 10px;
  }
  .second__block .content .content__left {
    height: 200px;
  }
  .second__block .content .content__left {
    min-width: 200px;
  }
  .second__block .content .content__right {
    gap: 10px;
  }
  .third__block .container .skyscraper .percent {
    font-size: 1.25rem;
  }
  .fourth__container .section__title {
    margin-bottom: 50px;
  }
  .fourth__container .advantage__title {
    font-size: 1.125rem;
  }
  .fifth__block .partners .partner {
    padding-right: 20px;
  }
  .fifth__block .partners .partner {
    padding-left: 20px;
  }
  .fifth__block .partners .partner {
    padding-top: 5px;
  }
  .fifth__block .partners .partner {
    padding-bottom: 5px;
  }
  .sixth__block .program {
    gap: 10px;
  }
  .sixth__block .program .week {
    max-width: 100px;
  }
  .sixth__block .program .week__description {
    font-size: 0.875rem;
  }
}

@media (prefers-reduced-motion: reduce){
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    scroll-behavior: auto !important;
    transition-duration: 0.01ms !important;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
